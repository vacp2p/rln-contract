{
  "address": "0x58322513A35a8f747AF5A385bA14C2AbE602AA59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poseidonHasher",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_contractIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateIdCommitment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FullTree",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "InvalidIdCommitment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBERSHIP_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedBlockNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCommitmentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "isValidCommitment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memberExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidonHasher",
      "outputs": [
        {
          "internalType": "contract PoseidonHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "idCommitments",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x269ccfb3fcbcce27ad9a59f834007b27b73586fff66b3428cf83876e95b3e05b",
  "receipt": {
    "to": "0xF471d71E9b1455bBF4b85d475afb9BB0954A29c4",
    "from": "0x3F47b2a1dF96DE2e198d646b598C37251CCC3b98",
    "transactionIndex": null,
    "blockHash": null,
    "blockNumber": null
  },
  "args": ["0x6b81Eaf30b0C16A9842458A3131fBa78745907A8", 0],
  "numDeployments": 1,
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poseidonHasher\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_contractIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateIdCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FullTree\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"InvalidIdCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBERSHIP_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCommitmentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"isValidCommitment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidonHasher\",\"outputs\":[{\"internalType\":\"contract PoseidonHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idCommitments\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"slash(uint256,address,uint256[8])\":{\"details\":\"Allows a user to slash a member\",\"params\":{\"idCommitment\":\"The idCommitment of the member\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"DuplicateIdCommitment()\":[{\"notice\":\"Member is already registered\"}],\"FullTree()\":[{\"notice\":\"The tree is full\"}],\"InvalidIdCommitment(uint256)\":[{\"notice\":\"Invalid idCommitment\"}]},\"events\":{\"MemberRegistered(uint256,uint256)\":{\"notice\":\"Emitted when a new member is added to the set\"},\"MemberWithdrawn(uint256,uint256)\":{\"notice\":\"Emitted when a member is removed from the set\"}},\"kind\":\"user\",\"methods\":{\"DEPTH()\":{\"notice\":\"The depth of the merkle tree\"},\"MEMBERSHIP_DEPOSIT()\":{\"notice\":\"The deposit amount required to register as a member\"},\"SET_SIZE()\":{\"notice\":\"The size of the merkle tree, i.e 2^depth\"},\"deployedBlockNumber()\":{\"notice\":\"the deployed block number\"},\"idCommitmentIndex()\":{\"notice\":\"The index of the next member to be registered\"},\"members(uint256)\":{\"notice\":\"The membership status of each member maps from idCommitment to their index in the set\"},\"poseidonHasher()\":{\"notice\":\"The Poseidon hasher contract\"},\"register(uint256)\":{\"notice\":\"Allows a user to register as a member\"},\"stakedAmounts(uint256)\":{\"notice\":\"The amount of eth staked by each member maps from idCommitment to the amount staked\"},\"verifier()\":{\"notice\":\"The groth16 verifier contract\"},\"withdraw()\":{\"notice\":\"Allows a user to withdraw funds allocated to them upon slashing a member\"},\"withdrawalBalance(address)\":{\"notice\":\"The balance of each user that can be withdrawn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WakuRln.sol\":\"WakuRln\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":rln-contract/=lib/rln-contract/contracts/\"]},\"sources\":{\"contracts/WakuRln.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {IPoseidonHasher} from \\\"rln-contract/PoseidonHasher.sol\\\";\\nimport {RlnBase, DuplicateIdCommitment, FullTree, InvalidIdCommitment} from \\\"rln-contract/RlnBase.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\nerror NotImplemented();\\n\\ncontract WakuRln is Ownable, RlnBase {\\n    uint16 public immutable contractIndex;\\n\\n    constructor(\\n        address _poseidonHasher,\\n        uint16 _contractIndex\\n    ) Ownable() RlnBase(0, 20, _poseidonHasher, address(0)) {\\n        contractIndex = _contractIndex;\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    function _register(uint256 idCommitment) internal {\\n        _validateRegistration(idCommitment);\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        memberExists[idCommitment] = true;\\n\\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    function register(uint256[] calldata idCommitments) external onlyOwner {\\n        uint256 len = idCommitments.length;\\n        for (uint256 i = 0; i < len; ) {\\n            _register(idCommitments[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function register(uint256 idCommitment) external payable override {\\n        revert NotImplemented();\\n    }\\n\\n    function slash(\\n        uint256 idCommitment,\\n        address payable receiver,\\n        uint256[8] calldata proof\\n    ) external pure override {\\n        revert NotImplemented();\\n    }\\n\\n    function _validateRegistration(\\n        uint256 idCommitment\\n    ) internal view override {\\n        if (!isValidCommitment(idCommitment))\\n            revert InvalidIdCommitment(idCommitment);\\n        if (memberExists[idCommitment] == true) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n    }\\n\\n    function _validateSlash(\\n        uint256 idCommitment,\\n        address payable receiver,\\n        uint256[8] calldata proof\\n    ) internal pure override {\\n        revert NotImplemented();\\n    }\\n\\n    function withdraw() external pure override {\\n        revert NotImplemented();\\n    }\\n}\\n\",\"keccak256\":\"0x5c21abfd927575732fb3bcd4a78b009abeb9f3b040ebab744b21f2dd53693ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/rln-contract/contracts/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0 OR MIT\\npragma solidity 0.8.15;\\n\\ninterface IVerifier {\\n    function verifyProof(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x538e61fbb62bf1ef9f0c3f7e7d771ddfc8506a97e7d98aada763830fc741d8b8\",\"license\":\"Apache-2.0 OR MIT\"},\"lib/rln-contract/contracts/PoseidonHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Forked from https://github.com/kilic/rlnapp/\\n\\npragma solidity 0.8.15;\\n\\ninterface IPoseidonHasher {\\n    /// @notice Hashes the input using the Poseidon hash function, n = 2, second input is the constant 0\\n    /// @param input The input to hash\\n    function hash(uint256 input) external pure returns (uint256 result);\\n}\\n\\ncontract PoseidonHasher is IPoseidonHasher {\\n    uint256 public constant Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant C0 = 4417881134626180770308697923359573201005643519861877412381846989312604493735;\\n    uint256 constant C1 = 5433650512959517612316327474713065966758808864213826738576266661723522780033;\\n    uint256 constant C2 = 13641176377184356099764086973022553863760045607496549923679278773208775739952;\\n    uint256 constant C3 = 17949713444224994136330421782109149544629237834775211751417461773584374506783;\\n    uint256 constant C4 = 13765628375339178273710281891027109699578766420463125835325926111705201856003;\\n    uint256 constant C5 = 19179513468172002314585757290678967643352171735526887944518845346318719730387;\\n    uint256 constant C6 = 5157412437176756884543472904098424903141745259452875378101256928559722612176;\\n    uint256 constant C7 = 535160875740282236955320458485730000677124519901643397458212725410971557409;\\n    uint256 constant C8 = 1050793453380762984940163090920066886770841063557081906093018330633089036729;\\n    uint256 constant C9 = 10665495010329663932664894101216428400933984666065399374198502106997623173873;\\n    uint256 constant C10 = 19965634623406616956648724894636666805991993496469370618546874926025059150737;\\n    uint256 constant C11 = 13007250030070838431593222885902415182312449212965120303174723305710127422213;\\n    uint256 constant C12 = 16877538715074991604507979123743768693428157847423939051086744213162455276374;\\n    uint256 constant C13 = 18211747749504876135588847560312685184956239426147543810126553367063157141465;\\n    uint256 constant C14 = 18151553319826126919739798892854572062191241985315767086020821632812331245635;\\n    uint256 constant C15 = 19957033149976712666746140949846950406660099037474791840946955175819555930825;\\n    uint256 constant C16 = 3469514863538261843186854830917934449567467100548474599735384052339577040841;\\n    uint256 constant C17 = 989698510043911779243192466312362856042600749099921773896924315611668507708;\\n    uint256 constant C18 = 12568377015646290945235387813564567111330046038050864455358059568128000172201;\\n    uint256 constant C19 = 20856104135605479600325529349246932565148587186338606236677138505306779314172;\\n    uint256 constant C20 = 8206918720503535523121349917159924938835810381723474192155637697065780938424;\\n    uint256 constant C21 = 1309058477013932989380617265069188723120054926187607548493110334522527703566;\\n    uint256 constant C22 = 14076116939332667074621703729512195584105250395163383769419390236426287710606;\\n    uint256 constant C23 = 10153498892749751942204288991871286290442690932856658983589258153608012428674;\\n    uint256 constant C24 = 18202499207234128286137597834010475797175973146805180988367589376893530181575;\\n    uint256 constant C25 = 12739388830157083522877690211447248168864006284243907142044329113461613743052;\\n    uint256 constant C26 = 15123358710467780770838026754240340042441262572309759635224051333176022613949;\\n    uint256 constant C27 = 19925004701844594370904593774447343836015483888496504201331110250494635362184;\\n    uint256 constant C28 = 10352416606816998476681131583320899030072315953910679608943150613208329645891;\\n    uint256 constant C29 = 10567371822366244361703342347428230537114808440249611395507235283708966113221;\\n    uint256 constant C30 = 5635498582763880627392290206431559361272660937399944184533035305989295959602;\\n    uint256 constant C31 = 11866432933224219174041051738704352719163271639958083608224676028593315904909;\\n    uint256 constant C32 = 5795020705294401441272215064554385591292330721703923167136157291459784140431;\\n    uint256 constant C33 = 9482202378699252817564375087302794636287866584767523335624368774856230692758;\\n    uint256 constant C34 = 4245237636894546151746468406560945873445548423466753843402086544922216329298;\\n    uint256 constant C35 = 12000500941313982757584712677991730019124834399479314697467598397927435905133;\\n    uint256 constant C36 = 7596790274058425558167520209857956363736666939016807569082239187494363541787;\\n    uint256 constant C37 = 2484867918246116343205467273440098378820186751202461278013576281097918148877;\\n    uint256 constant C38 = 18312645949449997391810445935615409295369169383463185688973803378104013950190;\\n    uint256 constant C39 = 15320686572748723004980855263301182130424010735782762814513954166519592552733;\\n    uint256 constant C40 = 12618438900597948888520621062416758747872180395546164387827245287017031303859;\\n    uint256 constant C41 = 17438141672027706116733201008397064011774368832458707512367404736905021019585;\\n    uint256 constant C42 = 6374197807230665998865688675365359100400438034755781666913068586172586548950;\\n    uint256 constant C43 = 2189398913433273865510950346186699930188746169476472274335177556702504595264;\\n    uint256 constant C44 = 6268495580028970231803791523870131137294646402347399003576649137450213034606;\\n    uint256 constant C45 = 17896250365994900261202920044129628104272791547990619503076839618914047059275;\\n    uint256 constant C46 = 13692156312448722528008862371944543449350293305158722920787736248435893008873;\\n    uint256 constant C47 = 15234446864368744483209945022439268713300180233589581910497691316744177619376;\\n    uint256 constant C48 = 1572426502623310766593681563281600503979671244997798691029595521622402217227;\\n    uint256 constant C49 = 80103447810215150918585162168214870083573048458555897999822831203653996617;\\n    uint256 constant C50 = 8228820324013669567851850635126713973797711779951230446503353812192849106342;\\n    uint256 constant C51 = 5375851433746509614045812476958526065449377558695752132494533666370449415873;\\n    uint256 constant C52 = 12115998939203497346386774317892338270561208357481805380546938146796257365018;\\n    uint256 constant C53 = 9764067909645821279940531410531154041386008396840887338272986634350423466622;\\n    uint256 constant C54 = 8538708244538850542384936174629541085495830544298260335345008245230827876882;\\n    uint256 constant C55 = 7140127896620013355910287215441004676619168261422440177712039790284719613114;\\n    uint256 constant C56 = 14297402962228458726038826185823085337698917275385741292940049024977027409762;\\n    uint256 constant C57 = 6667115556431351074165934212337261254608231545257434281887966406956835140819;\\n    uint256 constant C58 = 20226761165244293291042617464655196752671169026542832236139342122602741090001;\\n    uint256 constant C59 = 12038289506489256655759141386763477208196694421666339040483042079632134429119;\\n    uint256 constant C60 = 19027757334170818571203982241812412991528769934917288000224335655934473717551;\\n    uint256 constant C61 = 16272152964456553579565580463468069884359929612321610357528838696790370074720;\\n    uint256 constant C62 = 2500392889689246014710135696485946334448570271481948765283016105301740284071;\\n    uint256 constant C63 = 8595254970528530312401637448610398388203855633951264114100575485022581946023;\\n    uint256 constant C64 = 11635945688914011450976408058407206367914559009113158286982919675551688078198;\\n    uint256 constant C65 = 614739068603482619581328040478536306925147663946742687395148680260956671871;\\n    uint256 constant C66 = 18692271780377861570175282183255720350972693125537599213951106550953176268753;\\n    uint256 constant C67 = 4987059230784976306647166378298632695585915319042844495357753339378260807164;\\n    uint256 constant C68 = 21851403978498723616722415377430107676258664746210815234490134600998983955497;\\n    uint256 constant C69 = 9830635451186415300891533983087800047564037813328875992115573428596207326204;\\n    uint256 constant C70 = 4842706106434537116860242620706030229206345167233200482994958847436425185478;\\n    uint256 constant C71 = 6422235064906823218421386871122109085799298052314922856340127798647926126490;\\n    uint256 constant C72 = 4564364104986856861943331689105797031330091877115997069096365671501473357846;\\n    uint256 constant C73 = 1944043894089780613038197112872830569538541856657037469098448708685350671343;\\n    uint256 constant C74 = 21179865974855950600518216085229498748425990426231530451599322283119880194955;\\n    uint256 constant C75 = 14296697761894107574369608843560006996183955751502547883167824879840894933162;\\n    uint256 constant C76 = 12274619649702218570450581712439138337725246879938860735460378251639845671898;\\n    uint256 constant C77 = 16371396450276899401411886674029075408418848209575273031725505038938314070356;\\n    uint256 constant C78 = 3702561221750983937578095019779188631407216522704543451228773892695044653565;\\n    uint256 constant C79 = 19721616877735564664624984774636557499099875603996426215495516594530838681980;\\n    uint256 constant C80 = 6383350109027696789969911008057747025018308755462287526819231672217685282429;\\n    uint256 constant C81 = 20860583956177367265984596617324237471765572961978977333122281041544719622905;\\n    uint256 constant C82 = 5766390934595026947545001478457407504285452477687752470140790011329357286275;\\n    uint256 constant C83 = 4043175758319898049344746138515323336207420888499903387536875603879441092484;\\n    uint256 constant C84 = 15579382179133608217098622223834161692266188678101563820988612253342538956534;\\n    uint256 constant C85 = 1864640783252634743892105383926602930909039567065240010338908865509831749824;\\n    uint256 constant C86 = 15943719865023133586707144161652035291705809358178262514871056013754142625673;\\n    uint256 constant C87 = 2326415993032390211558498780803238091925402878871059708106213703504162832999;\\n    uint256 constant C88 = 19995326402773833553207196590622808505547443523750970375738981396588337910289;\\n    uint256 constant C89 = 5143583711361588952673350526320181330406047695593201009385718506918735286622;\\n    uint256 constant C90 = 15436006486881920976813738625999473183944244531070780793506388892313517319583;\\n    uint256 constant C91 = 16660446760173633166698660166238066533278664023818938868110282615200613695857;\\n    uint256 constant C92 = 4966065365695755376133119391352131079892396024584848298231004326013366253934;\\n    uint256 constant C93 = 20683781957411705574951987677641476019618457561419278856689645563561076926702;\\n    uint256 constant C94 = 17280836839165902792086432296371645107551519324565649849400948918605456875699;\\n    uint256 constant C95 = 17045635513701208892073056357048619435743564064921155892004135325530808465371;\\n    uint256 constant C96 = 17055032967194400710390142791334572297458033582458169295920670679093585707295;\\n    uint256 constant C97 = 15727174639569115300068198908071514334002742825679221638729902577962862163505;\\n    uint256 constant C98 = 1001755657610446661315902885492677747789366510875120894840818704741370398633;\\n    uint256 constant C99 = 18638547332826171619311285502376343504539399518545103511265465604926625041234;\\n    uint256 constant C100 = 6751954224763196429755298529194402870632445298969935050224267844020826420799;\\n    uint256 constant C101 = 3526747115904224771452549517614107688674036840088422555827581348280834879405;\\n    uint256 constant C102 = 15705897908180497062880001271426561999724005008972544196300715293701537574122;\\n    uint256 constant C103 = 574386695213920937259007343820417029802510752426579750428758189312416867750;\\n    uint256 constant C104 = 15973040855000600860816974646787367136127946402908768408978806375685439868553;\\n    uint256 constant C105 = 20934130413948796333037139460875996342810005558806621330680156931816867321122;\\n    uint256 constant C106 = 6918585327145564636398173845411579411526758237572034236476079610890705810764;\\n    uint256 constant C107 = 14158163500813182062258176233162498241310167509137716527054939926126453647182;\\n    uint256 constant C108 = 4164602626597695668474100217150111342272610479949122406544277384862187287433;\\n    uint256 constant C109 = 12146526846507496913615390662823936206892812880963914267275606265272996025304;\\n    uint256 constant C110 = 10153527926900017763244212043512822363696541810586522108597162891799345289938;\\n    uint256 constant C111 = 13564663485965299104296214940873270349072051793008946663855767889066202733588;\\n    uint256 constant C112 = 5612449256997576125867742696783020582952387615430650198777254717398552960096;\\n    uint256 constant C113 = 12151885480032032868507892738683067544172874895736290365318623681886999930120;\\n    uint256 constant C114 = 380452237704664384810613424095477896605414037288009963200982915188629772177;\\n    uint256 constant C115 = 9067557551252570188533509616805287919563636482030947363841198066124642069518;\\n    uint256 constant C116 = 21280306817619711661335268484199763923870315733198162896599997188206277056900;\\n    uint256 constant C117 = 5567165819557297006750252582140767993422097822227408837378089569369734876257;\\n    uint256 constant C118 = 10411936321072105429908396649383171465939606386380071222095155850987201580137;\\n    uint256 constant C119 = 21338390051413922944780864872652000187403217966653363270851298678606449622266;\\n    uint256 constant C120 = 12156296560457833712186127325312904760045212412680904475497938949653569234473;\\n    uint256 constant C121 = 4271647814574748734312113971565139132510281260328947438246615707172526380757;\\n    uint256 constant C122 = 9061738206062369647211128232833114177054715885442782773131292534862178874950;\\n    uint256 constant C123 = 10134551893627587797380445583959894183158393780166496661696555422178052339133;\\n    uint256 constant C124 = 8932270237664043612366044102088319242789325050842783721780970129656616386103;\\n    uint256 constant C125 = 3339412934966886386194449782756711637636784424032779155216609410591712750636;\\n    uint256 constant C126 = 9704903972004596791086522314847373103670545861209569267884026709445485704400;\\n    uint256 constant C127 = 17467570179597572575614276429760169990940929887711661192333523245667228809456;\\n    uint256 constant M00 = 2910766817845651019878574839501801340070030115151021261302834310722729507541;\\n    uint256 constant M01 = 19727366863391167538122140361473584127147630672623100827934084310230022599144;\\n    uint256 constant M10 = 5776684794125549462448597414050232243778680302179439492664047328281728356345;\\n    uint256 constant M11 = 8348174920934122550483593999453880006756108121341067172388445916328941978568;\\n\\n    function hash(uint256 input) external pure override returns (uint256 result) {\\n        return _hash(input);\\n    }\\n\\n    function _hash(uint256 input) internal pure returns (uint256 result) {\\n        assembly {\\n            // Poseidon parameters should be t = 2, RF = 8, RP = 56\\n\\n            // We load the characteristic\\n            let q := Q\\n\\n            // In zerokit implementation, if we pass inp = [a0,a1,..,an] to Poseidon what is effectively hashed is [0,a0,a1,..,an]\\n            // Note that a sequence of MIX-ARK involves 3 Bn254 field additions before the mulmod happens. Worst case we have a value corresponding to 2*(p-1) which is less than 2^256 and hence doesn't overflow\\n            //ROUND 0 - FULL\\n            let s0 := C0\\n            let s1 := add(input, C1)\\n            // SBOX\\n            let t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 1 - FULL\\n            s0 := add(s0, C2)\\n            s1 := add(s1, C3)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 2 - FULL\\n            s0 := add(s0, C4)\\n            s1 := add(s1, C5)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 3 - FULL\\n            s0 := add(s0, C6)\\n            s1 := add(s1, C7)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 4 - PARTIAL\\n            s0 := add(s0, C8)\\n            s1 := add(s1, C9)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 5 - PARTIAL\\n            s0 := add(s0, C10)\\n            s1 := add(s1, C11)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 6 - PARTIAL\\n            s0 := add(s0, C12)\\n            s1 := add(s1, C13)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 7 - PARTIAL\\n            s0 := add(s0, C14)\\n            s1 := add(s1, C15)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 8 - PARTIAL\\n            s0 := add(s0, C16)\\n            s1 := add(s1, C17)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 9 - PARTIAL\\n            s0 := add(s0, C18)\\n            s1 := add(s1, C19)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 10 - PARTIAL\\n            s0 := add(s0, C20)\\n            s1 := add(s1, C21)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 11 - PARTIAL\\n            s0 := add(s0, C22)\\n            s1 := add(s1, C23)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 12 - PARTIAL\\n            s0 := add(s0, C24)\\n            s1 := add(s1, C25)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 13 - PARTIAL\\n            s0 := add(s0, C26)\\n            s1 := add(s1, C27)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 14 - PARTIAL\\n            s0 := add(s0, C28)\\n            s1 := add(s1, C29)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 15 - PARTIAL\\n            s0 := add(s0, C30)\\n            s1 := add(s1, C31)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 16 - PARTIAL\\n            s0 := add(s0, C32)\\n            s1 := add(s1, C33)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 17 - PARTIAL\\n            s0 := add(s0, C34)\\n            s1 := add(s1, C35)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 18 - PARTIAL\\n            s0 := add(s0, C36)\\n            s1 := add(s1, C37)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 19 - PARTIAL\\n            s0 := add(s0, C38)\\n            s1 := add(s1, C39)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 20 - PARTIAL\\n            s0 := add(s0, C40)\\n            s1 := add(s1, C41)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 21 - PARTIAL\\n            s0 := add(s0, C42)\\n            s1 := add(s1, C43)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 22 - PARTIAL\\n            s0 := add(s0, C44)\\n            s1 := add(s1, C45)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 23 - PARTIAL\\n            s0 := add(s0, C46)\\n            s1 := add(s1, C47)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 24 - PARTIAL\\n            s0 := add(s0, C48)\\n            s1 := add(s1, C49)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 25 - PARTIAL\\n            s0 := add(s0, C50)\\n            s1 := add(s1, C51)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 26 - PARTIAL\\n            s0 := add(s0, C52)\\n            s1 := add(s1, C53)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 27 - PARTIAL\\n            s0 := add(s0, C54)\\n            s1 := add(s1, C55)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 28 - PARTIAL\\n            s0 := add(s0, C56)\\n            s1 := add(s1, C57)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 29 - PARTIAL\\n            s0 := add(s0, C58)\\n            s1 := add(s1, C59)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 30 - PARTIAL\\n            s0 := add(s0, C60)\\n            s1 := add(s1, C61)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 31 - PARTIAL\\n            s0 := add(s0, C62)\\n            s1 := add(s1, C63)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 32 - PARTIAL\\n            s0 := add(s0, C64)\\n            s1 := add(s1, C65)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 33 - PARTIAL\\n            s0 := add(s0, C66)\\n            s1 := add(s1, C67)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 34 - PARTIAL\\n            s0 := add(s0, C68)\\n            s1 := add(s1, C69)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 35 - PARTIAL\\n            s0 := add(s0, C70)\\n            s1 := add(s1, C71)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 36 - PARTIAL\\n            s0 := add(s0, C72)\\n            s1 := add(s1, C73)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 37 - PARTIAL\\n            s0 := add(s0, C74)\\n            s1 := add(s1, C75)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 38 - PARTIAL\\n            s0 := add(s0, C76)\\n            s1 := add(s1, C77)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 39 - PARTIAL\\n            s0 := add(s0, C78)\\n            s1 := add(s1, C79)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 40 - PARTIAL\\n            s0 := add(s0, C80)\\n            s1 := add(s1, C81)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 41 - PARTIAL\\n            s0 := add(s0, C82)\\n            s1 := add(s1, C83)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 42 - PARTIAL\\n            s0 := add(s0, C84)\\n            s1 := add(s1, C85)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 43 - PARTIAL\\n            s0 := add(s0, C86)\\n            s1 := add(s1, C87)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 44 - PARTIAL\\n            s0 := add(s0, C88)\\n            s1 := add(s1, C89)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 45 - PARTIAL\\n            s0 := add(s0, C90)\\n            s1 := add(s1, C91)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 46 - PARTIAL\\n            s0 := add(s0, C92)\\n            s1 := add(s1, C93)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 47 - PARTIAL\\n            s0 := add(s0, C94)\\n            s1 := add(s1, C95)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 48 - PARTIAL\\n            s0 := add(s0, C96)\\n            s1 := add(s1, C97)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 49 - PARTIAL\\n            s0 := add(s0, C98)\\n            s1 := add(s1, C99)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 50 - PARTIAL\\n            s0 := add(s0, C100)\\n            s1 := add(s1, C101)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 51 - PARTIAL\\n            s0 := add(s0, C102)\\n            s1 := add(s1, C103)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 52 - PARTIAL\\n            s0 := add(s0, C104)\\n            s1 := add(s1, C105)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 53 - PARTIAL\\n            s0 := add(s0, C106)\\n            s1 := add(s1, C107)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 54 - PARTIAL\\n            s0 := add(s0, C108)\\n            s1 := add(s1, C109)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 55 - PARTIAL\\n            s0 := add(s0, C110)\\n            s1 := add(s1, C111)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 56 - PARTIAL\\n            s0 := add(s0, C112)\\n            s1 := add(s1, C113)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 57 - PARTIAL\\n            s0 := add(s0, C114)\\n            s1 := add(s1, C115)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 58 - PARTIAL\\n            s0 := add(s0, C116)\\n            s1 := add(s1, C117)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 59 - PARTIAL\\n            s0 := add(s0, C118)\\n            s1 := add(s1, C119)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 60 - FULL\\n            s0 := add(s0, C120)\\n            s1 := add(s1, C121)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 61 - FULL\\n            s0 := add(s0, C122)\\n            s1 := add(s1, C123)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 62 - FULL\\n            s0 := add(s0, C124)\\n            s1 := add(s1, C125)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 63 - FULL\\n            s0 := add(s0, C126)\\n            s1 := add(s1, C127)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            s0 := mod(add(mulmod(s0, M00, q), mulmod(s1, M01, q)), q)\\n\\n            result := s0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed0996a12945a2635d76de46844d30ae89a623aa05099648642357491b083546\",\"license\":\"MIT\"},\"lib/rln-contract/contracts/RlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {PoseidonHasher} from \\\"./PoseidonHasher.sol\\\";\\nimport {IVerifier} from \\\"./IVerifier.sol\\\";\\n\\n/// The tree is full\\nerror FullTree();\\n\\n/// Invalid deposit amount\\n/// @param required The required deposit amount\\n/// @param provided The provided deposit amount\\nerror InsufficientDeposit(uint256 required, uint256 provided);\\n\\n/// Member is already registered\\nerror DuplicateIdCommitment();\\n\\n/// Failed validation on registration/slashing\\nerror FailedValidation();\\n\\n/// Invalid idCommitment\\nerror InvalidIdCommitment(uint256 idCommitment);\\n\\n/// Invalid receiver address, when the receiver is the contract itself or 0x0\\nerror InvalidReceiverAddress(address to);\\n\\n/// Member is not registered\\nerror MemberNotRegistered(uint256 idCommitment);\\n\\n/// Member has no stake\\nerror MemberHasNoStake(uint256 idCommitment);\\n\\n/// User has insufficient balance to withdraw\\nerror InsufficientWithdrawalBalance();\\n\\n/// Contract has insufficient balance to return\\nerror InsufficientContractBalance();\\n\\n/// Invalid proof\\nerror InvalidProof();\\n\\nabstract contract RlnBase {\\n    /// @notice The deposit amount required to register as a member\\n    uint256 public immutable MEMBERSHIP_DEPOSIT;\\n\\n    /// @notice The depth of the merkle tree\\n    uint256 public immutable DEPTH;\\n\\n    /// @notice The size of the merkle tree, i.e 2^depth\\n    uint256 public immutable SET_SIZE;\\n\\n    /// @notice The index of the next member to be registered\\n    uint256 public idCommitmentIndex = 0;\\n\\n    /// @notice The amount of eth staked by each member\\n    /// maps from idCommitment to the amount staked\\n    mapping(uint256 => uint256) public stakedAmounts;\\n\\n    /// @notice The membership status of each member\\n    /// maps from idCommitment to their index in the set\\n    mapping(uint256 => uint256) public members;\\n\\n    mapping(uint256 => bool) public memberExists;\\n\\n    /// @notice The balance of each user that can be withdrawn\\n    mapping(address => uint256) public withdrawalBalance;\\n\\n    /// @notice The Poseidon hasher contract\\n    PoseidonHasher public immutable poseidonHasher;\\n\\n    /// @notice The groth16 verifier contract\\n    IVerifier public immutable verifier;\\n\\n    /// @notice the deployed block number\\n    uint32 public immutable deployedBlockNumber;\\n\\n    /// Emitted when a new member is added to the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberRegistered(uint256 idCommitment, uint256 index);\\n\\n    /// Emitted when a member is removed from the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberWithdrawn(uint256 idCommitment, uint256 index);\\n\\n    modifier onlyValidIdCommitment(uint256 idCommitment) {\\n        if (!isValidCommitment(idCommitment)) revert InvalidIdCommitment(idCommitment);\\n        _;\\n    }\\n\\n    constructor(uint256 membershipDeposit, uint256 depth, address _poseidonHasher, address _verifier) {\\n        MEMBERSHIP_DEPOSIT = membershipDeposit;\\n        DEPTH = depth;\\n        SET_SIZE = 1 << depth;\\n        poseidonHasher = PoseidonHasher(_poseidonHasher);\\n        verifier = IVerifier(_verifier);\\n        deployedBlockNumber = uint32(block.number);\\n    }\\n\\n    /// Allows a user to register as a member\\n    /// @param idCommitment The idCommitment of the member\\n    function register(uint256 idCommitment) external payable virtual onlyValidIdCommitment(idCommitment) {\\n        if (msg.value != MEMBERSHIP_DEPOSIT) {\\n            revert InsufficientDeposit(MEMBERSHIP_DEPOSIT, msg.value);\\n        }\\n        _validateRegistration(idCommitment);\\n        _register(idCommitment, msg.value);\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param stake The amount of eth staked by the member\\n    function _register(uint256 idCommitment, uint256 stake) internal virtual {\\n        if (memberExists[idCommitment]) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        memberExists[idCommitment] = true;\\n        stakedAmounts[idCommitment] = stake;\\n\\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    /// @dev Inheriting contracts MUST override this function\\n    function _validateRegistration(uint256 idCommitment) internal view virtual;\\n\\n    /// @dev Allows a user to slash a member\\n    /// @param idCommitment The idCommitment of the member\\n    function slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\\n        external\\n        virtual\\n        onlyValidIdCommitment(idCommitment)\\n    {\\n        _validateSlash(idCommitment, receiver, proof);\\n        _slash(idCommitment, receiver, proof);\\n    }\\n\\n    /// @dev Slashes a member by removing them from the set, and adding their\\n    /// stake to the receiver's available withdrawal balance\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param receiver The address to receive the funds\\n    function _slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) internal virtual {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert InvalidReceiverAddress(receiver);\\n        }\\n\\n        if (memberExists[idCommitment] == false) revert MemberNotRegistered(idCommitment);\\n        // check if member is registered\\n        if (stakedAmounts[idCommitment] == 0) {\\n            revert MemberHasNoStake(idCommitment);\\n        }\\n\\n        if (!_verifyProof(idCommitment, receiver, proof)) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 amountToTransfer = stakedAmounts[idCommitment];\\n\\n        // delete member\\n        uint256 index = members[idCommitment];\\n        members[idCommitment] = 0;\\n        memberExists[idCommitment] = false;\\n        stakedAmounts[idCommitment] = 0;\\n\\n        // refund deposit\\n        withdrawalBalance[receiver] += amountToTransfer;\\n\\n        emit MemberWithdrawn(idCommitment, index);\\n    }\\n\\n    function _validateSlash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\\n        internal\\n        view\\n        virtual;\\n\\n    /// Allows a user to withdraw funds allocated to them upon slashing a member\\n    function withdraw() external virtual {\\n        uint256 amount = withdrawalBalance[msg.sender];\\n\\n        if (amount == 0) revert InsufficientWithdrawalBalance();\\n        if (amount > address(this).balance) {\\n            revert InsufficientContractBalance();\\n        }\\n\\n        withdrawalBalance[msg.sender] = 0;\\n\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /// Hashes a value using the Poseidon hasher\\n    /// NOTE: The variant of Poseidon we use accepts only 1 input, assume n=2, and the second input is 0\\n    /// @param input The value to hash\\n    function hash(uint256 input) internal view returns (uint256) {\\n        return poseidonHasher.hash(input);\\n    }\\n\\n    function isValidCommitment(uint256 idCommitment) public view returns (bool) {\\n        return idCommitment != 0 && idCommitment < poseidonHasher.Q();\\n    }\\n\\n    /// @dev Groth16 proof verification\\n    function _verifyProof(uint256 idCommitment, address receiver, uint256[8] calldata proof)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [idCommitment, uint256(uint160(receiver))]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x74ee7fb18e908589cf111a865f4cb9652f4a59391a64dd0bd4f875bbd80c1a06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260006001553480156200001757600080fd5b50604051620014fa380380620014fa83398181016040528101906200003d919062000290565b6000601483600062000064620000586200011b60201b60201c565b6200012360201b60201c565b83608081815250508260a08181525050826001901b60c081815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250504363ffffffff166101208163ffffffff1681525050505050508061ffff166101408161ffff16815250505050620002d7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021982620001ec565b9050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600061ffff82169050919050565b6200026a8162000251565b81146200027657600080fd5b50565b6000815190506200028a816200025f565b92915050565b60008060408385031215620002aa57620002a9620001e7565b5b6000620002ba858286016200023a565b9250506020620002cd8582860162000279565b9150509250929050565b60805160a05160c05160e0516101005161012051610140516111ba620003406000396000610545015260006105e3015260006105690152600081816104ac015261058d0152600081816107560152610aea015260006106fc015260006107ac01526111ba6000f3fe60806040526004361061011f5760003560e01c80638be9b119116100a0578063c5b208ff11610064578063c5b208ff146103c5578063d0383d6814610402578063f207564e1461042d578063f220b9ec14610449578063f2fde38b146104745761011f565b80638be9b119146102de5780638da5cb5b1461030757806398366e3514610332578063ae74552a1461035d578063bc499128146103885761011f565b80634add651e116100e75780634add651e146101f95780635daf08ca146102245780636bdcc8ab14610261578063715018a61461029e5780637a34289d146102b55761011f565b806322d9730c1461012457806328b070e0146101615780632b7ac3f31461018c578063331b6ab3146101b75780633ccfd60b146101e2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190610b86565b61049d565b6040516101589190610bce565b60405180910390f35b34801561016d57600080fd5b50610176610543565b6040516101839190610c06565b60405180910390f35b34801561019857600080fd5b506101a1610567565b6040516101ae9190610ca0565b60405180910390f35b3480156101c357600080fd5b506101cc61058b565b6040516101d99190610cdc565b60405180910390f35b3480156101ee57600080fd5b506101f76105af565b005b34801561020557600080fd5b5061020e6105e1565b60405161021b9190610d16565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190610b86565b610605565b6040516102589190610d40565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190610b86565b61061d565b6040516102959190610bce565b60405180910390f35b3480156102aa57600080fd5b506102b361063d565b005b3480156102c157600080fd5b506102dc60048036038101906102d79190610dc0565b610651565b005b3480156102ea57600080fd5b5061030560048036038101906103009190610e6d565b61069f565b005b34801561031357600080fd5b5061031c6106d1565b6040516103299190610ee2565b60405180910390f35b34801561033e57600080fd5b506103476106fa565b6040516103549190610d40565b60405180910390f35b34801561036957600080fd5b5061037261071e565b60405161037f9190610d40565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190610b86565b610724565b6040516103bc9190610d40565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190610f29565b61073c565b6040516103f99190610d40565b60405180910390f35b34801561040e57600080fd5b50610417610754565b6040516104249190610d40565b60405180910390f35b61044760048036038101906104429190610b86565b610778565b005b34801561045557600080fd5b5061045e6107aa565b60405161046b9190610d40565b60405180910390f35b34801561048057600080fd5b5061049b60048036038101906104969190610f29565b6107ce565b005b600080821415801561053c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e493ef8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610f6b565b82105b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020528060005260406000206000915090505481565b60046020528060005260406000206000915054906101000a900460ff1681565b610645610851565b61064f60006108cf565b565b610659610851565b600082829050905060005b818110156106995761068e84848381811061068257610681610f98565b5b90506020020135610993565b806001019050610664565b50505050565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6107d6610851565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061104a565b60405180910390fd5b61084e816108cf565b50565b610859610a39565b73ffffffffffffffffffffffffffffffffffffffff166108776106d1565b73ffffffffffffffffffffffffffffffffffffffff16146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906110b6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61099c81610a41565b600154600360008381526020019081526020016000208190555060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d281600154604051610a159291906110d6565b60405180910390a16001806000828254610a2f919061112e565b9250508190555050565b600033905090565b610a4a8161049d565b610a8b57806040517f7f3e75af000000000000000000000000000000000000000000000000000000008152600401610a829190610d40565b60405180910390fd5b600115156004600083815260200190815260200160002060009054906101000a900460ff16151503610ae8576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015410610b43576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080fd5b600080fd5b6000819050919050565b610b6381610b50565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b600060208284031215610b9c57610b9b610b46565b5b6000610baa84828501610b71565b91505092915050565b60008115159050919050565b610bc881610bb3565b82525050565b6000602082019050610be36000830184610bbf565b92915050565b600061ffff82169050919050565b610c0081610be9565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c66610c61610c5c84610c21565b610c41565b610c21565b9050919050565b6000610c7882610c4b565b9050919050565b6000610c8a82610c6d565b9050919050565b610c9a81610c7f565b82525050565b6000602082019050610cb56000830184610c91565b92915050565b6000610cc682610c6d565b9050919050565b610cd681610cbb565b82525050565b6000602082019050610cf16000830184610ccd565b92915050565b600063ffffffff82169050919050565b610d1081610cf7565b82525050565b6000602082019050610d2b6000830184610d07565b92915050565b610d3a81610b50565b82525050565b6000602082019050610d556000830184610d31565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8057610d7f610d5b565b5b8235905067ffffffffffffffff811115610d9d57610d9c610d60565b5b602083019150836020820283011115610db957610db8610d65565b5b9250929050565b60008060208385031215610dd757610dd6610b46565b5b600083013567ffffffffffffffff811115610df557610df4610b4b565b5b610e0185828601610d6a565b92509250509250929050565b6000610e1882610c21565b9050919050565b610e2881610e0d565b8114610e3357600080fd5b50565b600081359050610e4581610e1f565b92915050565b600081905082602060080282011115610e6757610e66610d65565b5b92915050565b60008060006101408486031215610e8757610e86610b46565b5b6000610e9586828701610b71565b9350506020610ea686828701610e36565b9250506040610eb786828701610e4b565b9150509250925092565b6000610ecc82610c21565b9050919050565b610edc81610ec1565b82525050565b6000602082019050610ef76000830184610ed3565b92915050565b610f0681610ec1565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610b46565b5b6000610f4d84828501610f14565b91505092915050565b600081519050610f6581610b5a565b92915050565b600060208284031215610f8157610f80610b46565b5b6000610f8f84828501610f56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611034602683610fc7565b915061103f82610fd8565b604082019050919050565b6000602082019050818103600083015261106381611027565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110a0602083610fc7565b91506110ab8261106a565b602082019050919050565b600060208201905081810360008301526110cf81611093565b9050919050565b60006040820190506110eb6000830185610d31565b6110f86020830184610d31565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113982610b50565b915061114483610b50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611179576111786110ff565b5b82820190509291505056fea264697066735822122080702afa180498dc14ee9cd29cf35aa3eed2f3db78ee1fdb9b4ebf005387d01b64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "slash(uint256,address,uint256[8])": {
        "details": "Allows a user to slash a member",
        "params": {
          "idCommitment": "The idCommitment of the member"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  }
}
