{
  "address": "0xF1935b338321013f11068abCafC548A7B0db732C",
  "abi": [
    {
      "inputs": [],
      "name": "IncompatibleStorage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleStorageIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStorageContractAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storageAddress",
          "type": "address"
        }
      ],
      "name": "StorageAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "storageAddress",
          "type": "address"
        }
      ],
      "name": "NewStorageContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "forceProgress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poseidonHasher",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStorageIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidonHasher",
      "outputs": [
        {
          "internalType": "contract IPoseidonHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "storageIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "commitments",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "storageIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256[]",
          "name": "commitments",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storageAddress",
          "type": "address"
        }
      ],
      "name": "registerStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "storages",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usingStorageIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x74bfb47c0285a26086c83fc9499b3b01699255fb8587fbc097392d3ed4cff4ad",
  "receipt": {
    "to": null,
    "from": "0x3F47b2a1dF96DE2e198d646b598C37251CCC3b98",
    "contractAddress": "0xF1935b338321013f11068abCafC548A7B0db732C",
    "transactionIndex": 56,
    "gasUsed": "3719923",
    "logsBloom": "0x
    "blockHash": "0xcb299a458dcd79073958418a70c6b915cb070fc2f386f703aaf1ca9a5f40c592",
    "transactionHash": "0x74bfb47c0285a26086c83fc9499b3b01699255fb8587fbc097392d3ed4cff4ad",
    "logs": [],
    "blockNumber": 4230713,
    "cumulativeGasUsed": "7725868",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "af6ae18fee47307c5147e290ec4c7cfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncompatibleStorage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleStorageIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStorageContractAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"StorageAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"NewStorageContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"forceProgress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poseidonHasher\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStorageIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidonHasher\",\"outputs\":[{\"internalType\":\"contract IPoseidonHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"storageIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"commitments\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"storageIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"commitments\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"registerStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"storages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingStorageIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WakuRlnRegistry.sol\":\"WakuRlnRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":rln-contract/=lib/rln-contract/contracts/\"]},\"sources\":{\"contracts/WakuRln.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {IPoseidonHasher} from \\\"rln-contract/PoseidonHasher.sol\\\";\\nimport {RlnBase, DuplicateIdCommitment, FullTree, InvalidIdCommitment} from \\\"rln-contract/RlnBase.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\nerror NotImplemented();\\n\\ncontract WakuRln is Ownable, RlnBase {\\n    uint16 public immutable contractIndex;\\n\\n    constructor(\\n        address _poseidonHasher,\\n        uint16 _contractIndex\\n    ) Ownable() RlnBase(0, 20, _poseidonHasher, address(0)) {\\n        contractIndex = _contractIndex;\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    function _register(uint256 idCommitment) internal {\\n        _validateRegistration(idCommitment);\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        memberExists[idCommitment] = true;\\n\\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    function register(uint256[] calldata idCommitments) external onlyOwner {\\n        uint256 len = idCommitments.length;\\n        for (uint256 i = 0; i < len; ) {\\n            _register(idCommitments[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function register(uint256 idCommitment) external payable override {\\n        revert NotImplemented();\\n    }\\n\\n    function slash(\\n        uint256 idCommitment,\\n        address payable receiver,\\n        uint256[8] calldata proof\\n    ) external pure override {\\n        revert NotImplemented();\\n    }\\n\\n    function _validateRegistration(\\n        uint256 idCommitment\\n    ) internal view override {\\n        if (!isValidCommitment(idCommitment))\\n            revert InvalidIdCommitment(idCommitment);\\n        if (memberExists[idCommitment] == true) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n    }\\n\\n    function _validateSlash(\\n        uint256 idCommitment,\\n        address payable receiver,\\n        uint256[8] calldata proof\\n    ) internal pure override {\\n        revert NotImplemented();\\n    }\\n\\n    function withdraw() external pure override {\\n        revert NotImplemented();\\n    }\\n}\\n\",\"keccak256\":\"0x5c21abfd927575732fb3bcd4a78b009abeb9f3b040ebab744b21f2dd53693ddc\",\"license\":\"MIT\"},\"contracts/WakuRlnRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {WakuRln} from \\\"./WakuRln.sol\\\";\\nimport {IPoseidonHasher} from \\\"rln-contract/PoseidonHasher.sol\\\";\\nimport {UUPSUpgradeable} from \\\"openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\nimport {ERC1967Proxy} from \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nerror StorageAlreadyExists(address storageAddress);\\nerror NoStorageContractAvailable();\\nerror IncompatibleStorage();\\nerror IncompatibleStorageIndex();\\n\\ncontract WakuRlnRegistry is OwnableUpgradeable, UUPSUpgradeable {\\n    uint16 public nextStorageIndex;\\n    mapping(uint16 => address) public storages;\\n\\n    uint16 public usingStorageIndex = 0;\\n\\n    IPoseidonHasher public poseidonHasher;\\n\\n    event NewStorageContract(uint16 index, address storageAddress);\\n\\n    modifier onlyUsableStorage() {\\n        if (usingStorageIndex >= nextStorageIndex) revert NoStorageContractAvailable();\\n        _;\\n    }\\n\\n    function initialize(address _poseidonHasher) external initializer {\\n        poseidonHasher = IPoseidonHasher(_poseidonHasher);\\n        __Ownable_init();\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function _insertIntoStorageMap(address storageAddress) internal {\\n        storages[nextStorageIndex] = storageAddress;\\n        emit NewStorageContract(nextStorageIndex, storageAddress);\\n        nextStorageIndex += 1;\\n    }\\n\\n    function registerStorage(address storageAddress) external onlyOwner {\\n        if (storages[nextStorageIndex] != address(0)) revert StorageAlreadyExists(storageAddress);\\n        WakuRln wakuRln = WakuRln(storageAddress);\\n        if (wakuRln.poseidonHasher() != poseidonHasher) revert IncompatibleStorage();\\n        if (wakuRln.contractIndex() != nextStorageIndex) revert IncompatibleStorageIndex();\\n        _insertIntoStorageMap(storageAddress);\\n    }\\n\\n    function newStorage() external onlyOwner {\\n        WakuRln newStorageContract = new WakuRln(address(poseidonHasher), nextStorageIndex);\\n        _insertIntoStorageMap(address(newStorageContract));\\n    }\\n\\n    function register(uint256[] calldata commitments) external onlyUsableStorage {\\n        // iteratively check if the storage contract is full, and increment the usingStorageIndex if it is\\n        while (true) {\\n            try WakuRln(storages[usingStorageIndex]).register(commitments) {\\n                break;\\n            } catch (bytes memory err) {\\n                if (keccak256(err) != keccak256(abi.encodeWithSignature(\\\"FullTree()\\\"))) {\\n                    assembly {\\n                        revert(add(32, err), mload(err))\\n                    }\\n                    // when there are no further storage contracts available, revert\\n                } else if (usingStorageIndex + 1 >= nextStorageIndex) {\\n                    revert NoStorageContractAvailable();\\n                }\\n                usingStorageIndex += 1;\\n            }\\n        }\\n    }\\n\\n    function register(uint16 storageIndex, uint256[] calldata commitments) external {\\n        if (storageIndex >= nextStorageIndex) revert NoStorageContractAvailable();\\n        WakuRln(storages[storageIndex]).register(commitments);\\n    }\\n\\n    function register(uint16 storageIndex, uint256 commitment) external {\\n        if (storageIndex >= nextStorageIndex) revert NoStorageContractAvailable();\\n        // optimize the gas used below\\n        uint256[] memory commitments = new uint256[](1);\\n        commitments[0] = commitment;\\n        WakuRln(storages[storageIndex]).register(commitments);\\n    }\\n\\n    function forceProgress() external onlyOwner onlyUsableStorage {\\n        if (storages[usingStorageIndex + 1] == address(0)) revert NoStorageContractAvailable();\\n        usingStorageIndex += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x140a0cd29b8d0049636acc9bd560ddced8f790c44baa80f25ec8e23219486520\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"lib/rln-contract/contracts/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0 OR MIT\\npragma solidity 0.8.15;\\n\\ninterface IVerifier {\\n    function verifyProof(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x538e61fbb62bf1ef9f0c3f7e7d771ddfc8506a97e7d98aada763830fc741d8b8\",\"license\":\"Apache-2.0 OR MIT\"},\"lib/rln-contract/contracts/PoseidonHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Forked from https://github.com/kilic/rlnapp/\\n\\npragma solidity 0.8.15;\\n\\ninterface IPoseidonHasher {\\n    /// @notice Hashes the input using the Poseidon hash function, n = 2, second input is the constant 0\\n    /// @param input The input to hash\\n    function hash(uint256 input) external pure returns (uint256 result);\\n}\\n\\ncontract PoseidonHasher is IPoseidonHasher {\\n    uint256 public constant Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant C0 = 4417881134626180770308697923359573201005643519861877412381846989312604493735;\\n    uint256 constant C1 = 5433650512959517612316327474713065966758808864213826738576266661723522780033;\\n    uint256 constant C2 = 13641176377184356099764086973022553863760045607496549923679278773208775739952;\\n    uint256 constant C3 = 17949713444224994136330421782109149544629237834775211751417461773584374506783;\\n    uint256 constant C4 = 13765628375339178273710281891027109699578766420463125835325926111705201856003;\\n    uint256 constant C5 = 19179513468172002314585757290678967643352171735526887944518845346318719730387;\\n    uint256 constant C6 = 5157412437176756884543472904098424903141745259452875378101256928559722612176;\\n    uint256 constant C7 = 535160875740282236955320458485730000677124519901643397458212725410971557409;\\n    uint256 constant C8 = 1050793453380762984940163090920066886770841063557081906093018330633089036729;\\n    uint256 constant C9 = 10665495010329663932664894101216428400933984666065399374198502106997623173873;\\n    uint256 constant C10 = 19965634623406616956648724894636666805991993496469370618546874926025059150737;\\n    uint256 constant C11 = 13007250030070838431593222885902415182312449212965120303174723305710127422213;\\n    uint256 constant C12 = 16877538715074991604507979123743768693428157847423939051086744213162455276374;\\n    uint256 constant C13 = 18211747749504876135588847560312685184956239426147543810126553367063157141465;\\n    uint256 constant C14 = 18151553319826126919739798892854572062191241985315767086020821632812331245635;\\n    uint256 constant C15 = 19957033149976712666746140949846950406660099037474791840946955175819555930825;\\n    uint256 constant C16 = 3469514863538261843186854830917934449567467100548474599735384052339577040841;\\n    uint256 constant C17 = 989698510043911779243192466312362856042600749099921773896924315611668507708;\\n    uint256 constant C18 = 12568377015646290945235387813564567111330046038050864455358059568128000172201;\\n    uint256 constant C19 = 20856104135605479600325529349246932565148587186338606236677138505306779314172;\\n    uint256 constant C20 = 8206918720503535523121349917159924938835810381723474192155637697065780938424;\\n    uint256 constant C21 = 1309058477013932989380617265069188723120054926187607548493110334522527703566;\\n    uint256 constant C22 = 14076116939332667074621703729512195584105250395163383769419390236426287710606;\\n    uint256 constant C23 = 10153498892749751942204288991871286290442690932856658983589258153608012428674;\\n    uint256 constant C24 = 18202499207234128286137597834010475797175973146805180988367589376893530181575;\\n    uint256 constant C25 = 12739388830157083522877690211447248168864006284243907142044329113461613743052;\\n    uint256 constant C26 = 15123358710467780770838026754240340042441262572309759635224051333176022613949;\\n    uint256 constant C27 = 19925004701844594370904593774447343836015483888496504201331110250494635362184;\\n    uint256 constant C28 = 10352416606816998476681131583320899030072315953910679608943150613208329645891;\\n    uint256 constant C29 = 10567371822366244361703342347428230537114808440249611395507235283708966113221;\\n    uint256 constant C30 = 5635498582763880627392290206431559361272660937399944184533035305989295959602;\\n    uint256 constant C31 = 11866432933224219174041051738704352719163271639958083608224676028593315904909;\\n    uint256 constant C32 = 5795020705294401441272215064554385591292330721703923167136157291459784140431;\\n    uint256 constant C33 = 9482202378699252817564375087302794636287866584767523335624368774856230692758;\\n    uint256 constant C34 = 4245237636894546151746468406560945873445548423466753843402086544922216329298;\\n    uint256 constant C35 = 12000500941313982757584712677991730019124834399479314697467598397927435905133;\\n    uint256 constant C36 = 7596790274058425558167520209857956363736666939016807569082239187494363541787;\\n    uint256 constant C37 = 2484867918246116343205467273440098378820186751202461278013576281097918148877;\\n    uint256 constant C38 = 18312645949449997391810445935615409295369169383463185688973803378104013950190;\\n    uint256 constant C39 = 15320686572748723004980855263301182130424010735782762814513954166519592552733;\\n    uint256 constant C40 = 12618438900597948888520621062416758747872180395546164387827245287017031303859;\\n    uint256 constant C41 = 17438141672027706116733201008397064011774368832458707512367404736905021019585;\\n    uint256 constant C42 = 6374197807230665998865688675365359100400438034755781666913068586172586548950;\\n    uint256 constant C43 = 2189398913433273865510950346186699930188746169476472274335177556702504595264;\\n    uint256 constant C44 = 6268495580028970231803791523870131137294646402347399003576649137450213034606;\\n    uint256 constant C45 = 17896250365994900261202920044129628104272791547990619503076839618914047059275;\\n    uint256 constant C46 = 13692156312448722528008862371944543449350293305158722920787736248435893008873;\\n    uint256 constant C47 = 15234446864368744483209945022439268713300180233589581910497691316744177619376;\\n    uint256 constant C48 = 1572426502623310766593681563281600503979671244997798691029595521622402217227;\\n    uint256 constant C49 = 80103447810215150918585162168214870083573048458555897999822831203653996617;\\n    uint256 constant C50 = 8228820324013669567851850635126713973797711779951230446503353812192849106342;\\n    uint256 constant C51 = 5375851433746509614045812476958526065449377558695752132494533666370449415873;\\n    uint256 constant C52 = 12115998939203497346386774317892338270561208357481805380546938146796257365018;\\n    uint256 constant C53 = 9764067909645821279940531410531154041386008396840887338272986634350423466622;\\n    uint256 constant C54 = 8538708244538850542384936174629541085495830544298260335345008245230827876882;\\n    uint256 constant C55 = 7140127896620013355910287215441004676619168261422440177712039790284719613114;\\n    uint256 constant C56 = 14297402962228458726038826185823085337698917275385741292940049024977027409762;\\n    uint256 constant C57 = 6667115556431351074165934212337261254608231545257434281887966406956835140819;\\n    uint256 constant C58 = 20226761165244293291042617464655196752671169026542832236139342122602741090001;\\n    uint256 constant C59 = 12038289506489256655759141386763477208196694421666339040483042079632134429119;\\n    uint256 constant C60 = 19027757334170818571203982241812412991528769934917288000224335655934473717551;\\n    uint256 constant C61 = 16272152964456553579565580463468069884359929612321610357528838696790370074720;\\n    uint256 constant C62 = 2500392889689246014710135696485946334448570271481948765283016105301740284071;\\n    uint256 constant C63 = 8595254970528530312401637448610398388203855633951264114100575485022581946023;\\n    uint256 constant C64 = 11635945688914011450976408058407206367914559009113158286982919675551688078198;\\n    uint256 constant C65 = 614739068603482619581328040478536306925147663946742687395148680260956671871;\\n    uint256 constant C66 = 18692271780377861570175282183255720350972693125537599213951106550953176268753;\\n    uint256 constant C67 = 4987059230784976306647166378298632695585915319042844495357753339378260807164;\\n    uint256 constant C68 = 21851403978498723616722415377430107676258664746210815234490134600998983955497;\\n    uint256 constant C69 = 9830635451186415300891533983087800047564037813328875992115573428596207326204;\\n    uint256 constant C70 = 4842706106434537116860242620706030229206345167233200482994958847436425185478;\\n    uint256 constant C71 = 6422235064906823218421386871122109085799298052314922856340127798647926126490;\\n    uint256 constant C72 = 4564364104986856861943331689105797031330091877115997069096365671501473357846;\\n    uint256 constant C73 = 1944043894089780613038197112872830569538541856657037469098448708685350671343;\\n    uint256 constant C74 = 21179865974855950600518216085229498748425990426231530451599322283119880194955;\\n    uint256 constant C75 = 14296697761894107574369608843560006996183955751502547883167824879840894933162;\\n    uint256 constant C76 = 12274619649702218570450581712439138337725246879938860735460378251639845671898;\\n    uint256 constant C77 = 16371396450276899401411886674029075408418848209575273031725505038938314070356;\\n    uint256 constant C78 = 3702561221750983937578095019779188631407216522704543451228773892695044653565;\\n    uint256 constant C79 = 19721616877735564664624984774636557499099875603996426215495516594530838681980;\\n    uint256 constant C80 = 6383350109027696789969911008057747025018308755462287526819231672217685282429;\\n    uint256 constant C81 = 20860583956177367265984596617324237471765572961978977333122281041544719622905;\\n    uint256 constant C82 = 5766390934595026947545001478457407504285452477687752470140790011329357286275;\\n    uint256 constant C83 = 4043175758319898049344746138515323336207420888499903387536875603879441092484;\\n    uint256 constant C84 = 15579382179133608217098622223834161692266188678101563820988612253342538956534;\\n    uint256 constant C85 = 1864640783252634743892105383926602930909039567065240010338908865509831749824;\\n    uint256 constant C86 = 15943719865023133586707144161652035291705809358178262514871056013754142625673;\\n    uint256 constant C87 = 2326415993032390211558498780803238091925402878871059708106213703504162832999;\\n    uint256 constant C88 = 19995326402773833553207196590622808505547443523750970375738981396588337910289;\\n    uint256 constant C89 = 5143583711361588952673350526320181330406047695593201009385718506918735286622;\\n    uint256 constant C90 = 15436006486881920976813738625999473183944244531070780793506388892313517319583;\\n    uint256 constant C91 = 16660446760173633166698660166238066533278664023818938868110282615200613695857;\\n    uint256 constant C92 = 4966065365695755376133119391352131079892396024584848298231004326013366253934;\\n    uint256 constant C93 = 20683781957411705574951987677641476019618457561419278856689645563561076926702;\\n    uint256 constant C94 = 17280836839165902792086432296371645107551519324565649849400948918605456875699;\\n    uint256 constant C95 = 17045635513701208892073056357048619435743564064921155892004135325530808465371;\\n    uint256 constant C96 = 17055032967194400710390142791334572297458033582458169295920670679093585707295;\\n    uint256 constant C97 = 15727174639569115300068198908071514334002742825679221638729902577962862163505;\\n    uint256 constant C98 = 1001755657610446661315902885492677747789366510875120894840818704741370398633;\\n    uint256 constant C99 = 18638547332826171619311285502376343504539399518545103511265465604926625041234;\\n    uint256 constant C100 = 6751954224763196429755298529194402870632445298969935050224267844020826420799;\\n    uint256 constant C101 = 3526747115904224771452549517614107688674036840088422555827581348280834879405;\\n    uint256 constant C102 = 15705897908180497062880001271426561999724005008972544196300715293701537574122;\\n    uint256 constant C103 = 574386695213920937259007343820417029802510752426579750428758189312416867750;\\n    uint256 constant C104 = 15973040855000600860816974646787367136127946402908768408978806375685439868553;\\n    uint256 constant C105 = 20934130413948796333037139460875996342810005558806621330680156931816867321122;\\n    uint256 constant C106 = 6918585327145564636398173845411579411526758237572034236476079610890705810764;\\n    uint256 constant C107 = 14158163500813182062258176233162498241310167509137716527054939926126453647182;\\n    uint256 constant C108 = 4164602626597695668474100217150111342272610479949122406544277384862187287433;\\n    uint256 constant C109 = 12146526846507496913615390662823936206892812880963914267275606265272996025304;\\n    uint256 constant C110 = 10153527926900017763244212043512822363696541810586522108597162891799345289938;\\n    uint256 constant C111 = 13564663485965299104296214940873270349072051793008946663855767889066202733588;\\n    uint256 constant C112 = 5612449256997576125867742696783020582952387615430650198777254717398552960096;\\n    uint256 constant C113 = 12151885480032032868507892738683067544172874895736290365318623681886999930120;\\n    uint256 constant C114 = 380452237704664384810613424095477896605414037288009963200982915188629772177;\\n    uint256 constant C115 = 9067557551252570188533509616805287919563636482030947363841198066124642069518;\\n    uint256 constant C116 = 21280306817619711661335268484199763923870315733198162896599997188206277056900;\\n    uint256 constant C117 = 5567165819557297006750252582140767993422097822227408837378089569369734876257;\\n    uint256 constant C118 = 10411936321072105429908396649383171465939606386380071222095155850987201580137;\\n    uint256 constant C119 = 21338390051413922944780864872652000187403217966653363270851298678606449622266;\\n    uint256 constant C120 = 12156296560457833712186127325312904760045212412680904475497938949653569234473;\\n    uint256 constant C121 = 4271647814574748734312113971565139132510281260328947438246615707172526380757;\\n    uint256 constant C122 = 9061738206062369647211128232833114177054715885442782773131292534862178874950;\\n    uint256 constant C123 = 10134551893627587797380445583959894183158393780166496661696555422178052339133;\\n    uint256 constant C124 = 8932270237664043612366044102088319242789325050842783721780970129656616386103;\\n    uint256 constant C125 = 3339412934966886386194449782756711637636784424032779155216609410591712750636;\\n    uint256 constant C126 = 9704903972004596791086522314847373103670545861209569267884026709445485704400;\\n    uint256 constant C127 = 17467570179597572575614276429760169990940929887711661192333523245667228809456;\\n    uint256 constant M00 = 2910766817845651019878574839501801340070030115151021261302834310722729507541;\\n    uint256 constant M01 = 19727366863391167538122140361473584127147630672623100827934084310230022599144;\\n    uint256 constant M10 = 5776684794125549462448597414050232243778680302179439492664047328281728356345;\\n    uint256 constant M11 = 8348174920934122550483593999453880006756108121341067172388445916328941978568;\\n\\n    function hash(uint256 input) external pure override returns (uint256 result) {\\n        return _hash(input);\\n    }\\n\\n    function _hash(uint256 input) internal pure returns (uint256 result) {\\n        assembly {\\n            // Poseidon parameters should be t = 2, RF = 8, RP = 56\\n\\n            // We load the characteristic\\n            let q := Q\\n\\n            // In zerokit implementation, if we pass inp = [a0,a1,..,an] to Poseidon what is effectively hashed is [0,a0,a1,..,an]\\n            // Note that a sequence of MIX-ARK involves 3 Bn254 field additions before the mulmod happens. Worst case we have a value corresponding to 2*(p-1) which is less than 2^256 and hence doesn't overflow\\n            //ROUND 0 - FULL\\n            let s0 := C0\\n            let s1 := add(input, C1)\\n            // SBOX\\n            let t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 1 - FULL\\n            s0 := add(s0, C2)\\n            s1 := add(s1, C3)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 2 - FULL\\n            s0 := add(s0, C4)\\n            s1 := add(s1, C5)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 3 - FULL\\n            s0 := add(s0, C6)\\n            s1 := add(s1, C7)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 4 - PARTIAL\\n            s0 := add(s0, C8)\\n            s1 := add(s1, C9)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 5 - PARTIAL\\n            s0 := add(s0, C10)\\n            s1 := add(s1, C11)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 6 - PARTIAL\\n            s0 := add(s0, C12)\\n            s1 := add(s1, C13)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 7 - PARTIAL\\n            s0 := add(s0, C14)\\n            s1 := add(s1, C15)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 8 - PARTIAL\\n            s0 := add(s0, C16)\\n            s1 := add(s1, C17)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 9 - PARTIAL\\n            s0 := add(s0, C18)\\n            s1 := add(s1, C19)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 10 - PARTIAL\\n            s0 := add(s0, C20)\\n            s1 := add(s1, C21)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 11 - PARTIAL\\n            s0 := add(s0, C22)\\n            s1 := add(s1, C23)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 12 - PARTIAL\\n            s0 := add(s0, C24)\\n            s1 := add(s1, C25)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 13 - PARTIAL\\n            s0 := add(s0, C26)\\n            s1 := add(s1, C27)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 14 - PARTIAL\\n            s0 := add(s0, C28)\\n            s1 := add(s1, C29)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 15 - PARTIAL\\n            s0 := add(s0, C30)\\n            s1 := add(s1, C31)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 16 - PARTIAL\\n            s0 := add(s0, C32)\\n            s1 := add(s1, C33)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 17 - PARTIAL\\n            s0 := add(s0, C34)\\n            s1 := add(s1, C35)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 18 - PARTIAL\\n            s0 := add(s0, C36)\\n            s1 := add(s1, C37)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 19 - PARTIAL\\n            s0 := add(s0, C38)\\n            s1 := add(s1, C39)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 20 - PARTIAL\\n            s0 := add(s0, C40)\\n            s1 := add(s1, C41)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 21 - PARTIAL\\n            s0 := add(s0, C42)\\n            s1 := add(s1, C43)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 22 - PARTIAL\\n            s0 := add(s0, C44)\\n            s1 := add(s1, C45)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 23 - PARTIAL\\n            s0 := add(s0, C46)\\n            s1 := add(s1, C47)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 24 - PARTIAL\\n            s0 := add(s0, C48)\\n            s1 := add(s1, C49)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 25 - PARTIAL\\n            s0 := add(s0, C50)\\n            s1 := add(s1, C51)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 26 - PARTIAL\\n            s0 := add(s0, C52)\\n            s1 := add(s1, C53)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 27 - PARTIAL\\n            s0 := add(s0, C54)\\n            s1 := add(s1, C55)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 28 - PARTIAL\\n            s0 := add(s0, C56)\\n            s1 := add(s1, C57)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 29 - PARTIAL\\n            s0 := add(s0, C58)\\n            s1 := add(s1, C59)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 30 - PARTIAL\\n            s0 := add(s0, C60)\\n            s1 := add(s1, C61)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 31 - PARTIAL\\n            s0 := add(s0, C62)\\n            s1 := add(s1, C63)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 32 - PARTIAL\\n            s0 := add(s0, C64)\\n            s1 := add(s1, C65)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 33 - PARTIAL\\n            s0 := add(s0, C66)\\n            s1 := add(s1, C67)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 34 - PARTIAL\\n            s0 := add(s0, C68)\\n            s1 := add(s1, C69)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 35 - PARTIAL\\n            s0 := add(s0, C70)\\n            s1 := add(s1, C71)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 36 - PARTIAL\\n            s0 := add(s0, C72)\\n            s1 := add(s1, C73)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 37 - PARTIAL\\n            s0 := add(s0, C74)\\n            s1 := add(s1, C75)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 38 - PARTIAL\\n            s0 := add(s0, C76)\\n            s1 := add(s1, C77)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 39 - PARTIAL\\n            s0 := add(s0, C78)\\n            s1 := add(s1, C79)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 40 - PARTIAL\\n            s0 := add(s0, C80)\\n            s1 := add(s1, C81)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 41 - PARTIAL\\n            s0 := add(s0, C82)\\n            s1 := add(s1, C83)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 42 - PARTIAL\\n            s0 := add(s0, C84)\\n            s1 := add(s1, C85)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 43 - PARTIAL\\n            s0 := add(s0, C86)\\n            s1 := add(s1, C87)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 44 - PARTIAL\\n            s0 := add(s0, C88)\\n            s1 := add(s1, C89)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 45 - PARTIAL\\n            s0 := add(s0, C90)\\n            s1 := add(s1, C91)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 46 - PARTIAL\\n            s0 := add(s0, C92)\\n            s1 := add(s1, C93)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 47 - PARTIAL\\n            s0 := add(s0, C94)\\n            s1 := add(s1, C95)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 48 - PARTIAL\\n            s0 := add(s0, C96)\\n            s1 := add(s1, C97)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 49 - PARTIAL\\n            s0 := add(s0, C98)\\n            s1 := add(s1, C99)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 50 - PARTIAL\\n            s0 := add(s0, C100)\\n            s1 := add(s1, C101)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 51 - PARTIAL\\n            s0 := add(s0, C102)\\n            s1 := add(s1, C103)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 52 - PARTIAL\\n            s0 := add(s0, C104)\\n            s1 := add(s1, C105)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 53 - PARTIAL\\n            s0 := add(s0, C106)\\n            s1 := add(s1, C107)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 54 - PARTIAL\\n            s0 := add(s0, C108)\\n            s1 := add(s1, C109)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 55 - PARTIAL\\n            s0 := add(s0, C110)\\n            s1 := add(s1, C111)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 56 - PARTIAL\\n            s0 := add(s0, C112)\\n            s1 := add(s1, C113)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 57 - PARTIAL\\n            s0 := add(s0, C114)\\n            s1 := add(s1, C115)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 58 - PARTIAL\\n            s0 := add(s0, C116)\\n            s1 := add(s1, C117)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 59 - PARTIAL\\n            s0 := add(s0, C118)\\n            s1 := add(s1, C119)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 60 - FULL\\n            s0 := add(s0, C120)\\n            s1 := add(s1, C121)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 61 - FULL\\n            s0 := add(s0, C122)\\n            s1 := add(s1, C123)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 62 - FULL\\n            s0 := add(s0, C124)\\n            s1 := add(s1, C125)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 63 - FULL\\n            s0 := add(s0, C126)\\n            s1 := add(s1, C127)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            s0 := mod(add(mulmod(s0, M00, q), mulmod(s1, M01, q)), q)\\n\\n            result := s0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed0996a12945a2635d76de46844d30ae89a623aa05099648642357491b083546\",\"license\":\"MIT\"},\"lib/rln-contract/contracts/RlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {PoseidonHasher} from \\\"./PoseidonHasher.sol\\\";\\nimport {IVerifier} from \\\"./IVerifier.sol\\\";\\n\\n/// The tree is full\\nerror FullTree();\\n\\n/// Invalid deposit amount\\n/// @param required The required deposit amount\\n/// @param provided The provided deposit amount\\nerror InsufficientDeposit(uint256 required, uint256 provided);\\n\\n/// Member is already registered\\nerror DuplicateIdCommitment();\\n\\n/// Failed validation on registration/slashing\\nerror FailedValidation();\\n\\n/// Invalid idCommitment\\nerror InvalidIdCommitment(uint256 idCommitment);\\n\\n/// Invalid receiver address, when the receiver is the contract itself or 0x0\\nerror InvalidReceiverAddress(address to);\\n\\n/// Member is not registered\\nerror MemberNotRegistered(uint256 idCommitment);\\n\\n/// Member has no stake\\nerror MemberHasNoStake(uint256 idCommitment);\\n\\n/// User has insufficient balance to withdraw\\nerror InsufficientWithdrawalBalance();\\n\\n/// Contract has insufficient balance to return\\nerror InsufficientContractBalance();\\n\\n/// Invalid proof\\nerror InvalidProof();\\n\\nabstract contract RlnBase {\\n    /// @notice The deposit amount required to register as a member\\n    uint256 public immutable MEMBERSHIP_DEPOSIT;\\n\\n    /// @notice The depth of the merkle tree\\n    uint256 public immutable DEPTH;\\n\\n    /// @notice The size of the merkle tree, i.e 2^depth\\n    uint256 public immutable SET_SIZE;\\n\\n    /// @notice The index of the next member to be registered\\n    uint256 public idCommitmentIndex = 0;\\n\\n    /// @notice The amount of eth staked by each member\\n    /// maps from idCommitment to the amount staked\\n    mapping(uint256 => uint256) public stakedAmounts;\\n\\n    /// @notice The membership status of each member\\n    /// maps from idCommitment to their index in the set\\n    mapping(uint256 => uint256) public members;\\n\\n    mapping(uint256 => bool) public memberExists;\\n\\n    /// @notice The balance of each user that can be withdrawn\\n    mapping(address => uint256) public withdrawalBalance;\\n\\n    /// @notice The Poseidon hasher contract\\n    PoseidonHasher public immutable poseidonHasher;\\n\\n    /// @notice The groth16 verifier contract\\n    IVerifier public immutable verifier;\\n\\n    /// @notice the deployed block number\\n    uint32 public immutable deployedBlockNumber;\\n\\n    /// Emitted when a new member is added to the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberRegistered(uint256 idCommitment, uint256 index);\\n\\n    /// Emitted when a member is removed from the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberWithdrawn(uint256 idCommitment, uint256 index);\\n\\n    modifier onlyValidIdCommitment(uint256 idCommitment) {\\n        if (!isValidCommitment(idCommitment)) revert InvalidIdCommitment(idCommitment);\\n        _;\\n    }\\n\\n    constructor(uint256 membershipDeposit, uint256 depth, address _poseidonHasher, address _verifier) {\\n        MEMBERSHIP_DEPOSIT = membershipDeposit;\\n        DEPTH = depth;\\n        SET_SIZE = 1 << depth;\\n        poseidonHasher = PoseidonHasher(_poseidonHasher);\\n        verifier = IVerifier(_verifier);\\n        deployedBlockNumber = uint32(block.number);\\n    }\\n\\n    /// Allows a user to register as a member\\n    /// @param idCommitment The idCommitment of the member\\n    function register(uint256 idCommitment) external payable virtual onlyValidIdCommitment(idCommitment) {\\n        if (msg.value != MEMBERSHIP_DEPOSIT) {\\n            revert InsufficientDeposit(MEMBERSHIP_DEPOSIT, msg.value);\\n        }\\n        _validateRegistration(idCommitment);\\n        _register(idCommitment, msg.value);\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param stake The amount of eth staked by the member\\n    function _register(uint256 idCommitment, uint256 stake) internal virtual {\\n        if (memberExists[idCommitment]) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        memberExists[idCommitment] = true;\\n        stakedAmounts[idCommitment] = stake;\\n\\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    /// @dev Inheriting contracts MUST override this function\\n    function _validateRegistration(uint256 idCommitment) internal view virtual;\\n\\n    /// @dev Allows a user to slash a member\\n    /// @param idCommitment The idCommitment of the member\\n    function slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\\n        external\\n        virtual\\n        onlyValidIdCommitment(idCommitment)\\n    {\\n        _validateSlash(idCommitment, receiver, proof);\\n        _slash(idCommitment, receiver, proof);\\n    }\\n\\n    /// @dev Slashes a member by removing them from the set, and adding their\\n    /// stake to the receiver's available withdrawal balance\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param receiver The address to receive the funds\\n    function _slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) internal virtual {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert InvalidReceiverAddress(receiver);\\n        }\\n\\n        if (memberExists[idCommitment] == false) revert MemberNotRegistered(idCommitment);\\n        // check if member is registered\\n        if (stakedAmounts[idCommitment] == 0) {\\n            revert MemberHasNoStake(idCommitment);\\n        }\\n\\n        if (!_verifyProof(idCommitment, receiver, proof)) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 amountToTransfer = stakedAmounts[idCommitment];\\n\\n        // delete member\\n        uint256 index = members[idCommitment];\\n        members[idCommitment] = 0;\\n        memberExists[idCommitment] = false;\\n        stakedAmounts[idCommitment] = 0;\\n\\n        // refund deposit\\n        withdrawalBalance[receiver] += amountToTransfer;\\n\\n        emit MemberWithdrawn(idCommitment, index);\\n    }\\n\\n    function _validateSlash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\\n        internal\\n        view\\n        virtual;\\n\\n    /// Allows a user to withdraw funds allocated to them upon slashing a member\\n    function withdraw() external virtual {\\n        uint256 amount = withdrawalBalance[msg.sender];\\n\\n        if (amount == 0) revert InsufficientWithdrawalBalance();\\n        if (amount > address(this).balance) {\\n            revert InsufficientContractBalance();\\n        }\\n\\n        withdrawalBalance[msg.sender] = 0;\\n\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /// Hashes a value using the Poseidon hasher\\n    /// NOTE: The variant of Poseidon we use accepts only 1 input, assume n=2, and the second input is 0\\n    /// @param input The value to hash\\n    function hash(uint256 input) internal view returns (uint256) {\\n        return poseidonHasher.hash(input);\\n    }\\n\\n    function isValidCommitment(uint256 idCommitment) public view returns (bool) {\\n        return idCommitment != 0 && idCommitment < poseidonHasher.Q();\\n    }\\n\\n    /// @dev Groth16 proof verification\\n    function _verifyProof(uint256 idCommitment, address receiver, uint256[8] calldata proof)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [idCommitment, uint256(uint160(receiver))]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x74ee7fb18e908589cf111a865f4cb9652f4a59391a64dd0bd4f875bbd80c1a06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152506000606760006101000a81548161ffff021916908361ffff16021790555034801561006157600080fd5b506080516142c36100996000396000818161059e0152818161062f015281816107bf01528181610850015261090901526142c36000f3fe608060405260043610620001165760003560e01c80638da5cb5b11620000a3578063d44fda1f116200006d578063d44fda1f1462000315578063ef653d5e146200032f578063f184ef4c146200035d578063f2fde38b146200038d578063f554214714620003bb5762000116565b80638da5cb5b1462000259578063ab02492a1462000289578063c4d66de814620002b7578063cf61637414620002e55762000116565b80634f1ef28611620000e55780634f1ef28614620001c157806352d1902d14620001e1578063715018a614620002115780637a34289d146200022b5762000116565b806326e0fc1f146200011b578063331b6ab314620001495780633659cfe6146200017957806342f542e214620001a7575b600080fd5b3480156200012857600080fd5b5062000147600480360381019062000141919062001cf0565b620003ff565b005b3480156200015657600080fd5b506200016162000576565b60405162000170919062001dc2565b60405180910390f35b3480156200018657600080fd5b50620001a560048036038101906200019f919062001e24565b6200059c565b005b348015620001b457600080fd5b50620001bf62000734565b005b620001df6004803603810190620001d9919062001fb8565b620007bd565b005b348015620001ee57600080fd5b50620001f962000905565b60405162000208919062002039565b60405180910390f35b3480156200021e57600080fd5b5062000229620009c1565b005b3480156200023857600080fd5b50620002576004803603810190620002519190620020bf565b620009d9565b005b3480156200026657600080fd5b506200027162000c95565b60405162000280919062002125565b60405180910390f35b3480156200029657600080fd5b50620002b56004803603810190620002af919062002142565b62000cbf565b005b348015620002c457600080fd5b50620002e36004803603810190620002dd919062001e24565b62000dc2565b005b348015620002f257600080fd5b50620002fd62000f50565b6040516200030c9190620021bd565b60405180910390f35b3480156200032257600080fd5b506200032d62000f64565b005b3480156200033c57600080fd5b506200035b600480360381019062000355919062001e24565b620010ce565b005b3480156200036a57600080fd5b506200037562001366565b604051620003849190620021bd565b60405180910390f35b3480156200039a57600080fd5b50620003b96004803603810190620003b3919062001e24565b6200137a565b005b348015620003c857600080fd5b50620003e76004803603810190620003e19190620021da565b62001404565b604051620003f6919062002125565b60405180910390f35b606560009054906101000a900461ffff1661ffff168261ffff161062000451576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600167ffffffffffffffff81111562000471576200047062001e71565b5b604051908082528060200260200182016040528015620004a05781602001602082028036833780820191505090505b5090508181600081518110620004bb57620004ba6200220c565b5b602002602001018181525050606660008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d826040518263ffffffff1660e01b81526004016200053d919062002309565b600060405180830381600087803b1580156200055857600080fd5b505af11580156200056d573d6000803e3d6000fd5b50505050505050565b606760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036200062d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200062490620023b4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166200066e62001437565b73ffffffffffffffffffffffffffffffffffffffff1614620006c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006be906200244c565b60405180910390fd5b620006d28162001490565b6200073181600067ffffffffffffffff811115620006f557620006f462001e71565b5b6040519080825280601f01601f191660200182016040528015620007285781602001600182028036833780820191505090505b5060006200149d565b50565b6200073e6200161c565b6000606760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900461ffff16604051620007829062001c54565b6200078f9291906200246e565b604051809103906000f080158015620007ac573d6000803e3d6000fd5b509050620007ba81620016a1565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036200084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200084590620023b4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166200088f62001437565b73ffffffffffffffffffffffffffffffffffffffff1614620008e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008df906200244c565b60405180910390fd5b620008f38262001490565b62000901828260016200149d565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161462000998576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200098f9062002511565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b620009cb6200161c565b620009d7600062001795565b565b606560009054906101000a900461ffff1661ffff16606760009054906101000a900461ffff1661ffff161062000a3b576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60011562000c915760666000606760009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d83836040518363ffffffff1660e01b815260040162000acc9291906200259b565b600060405180830381600087803b15801562000ae757600080fd5b505af192505050801562000af9575060015b62000c85573d806000811462000b2c576040519150601f19603f3d011682016040523d82523d6000602084013e62000b31565b606091505b506040516024016040516020818303038152906040527f57f69531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508051906020012081805190602001201462000bd257805181602001fd5b606560009054906101000a900461ffff1661ffff166001606760009054906101000a900461ffff1662000c069190620025f0565b61ffff161062000c42576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606760008282829054906101000a900461ffff1662000c649190620025f0565b92506101000a81548161ffff021916908361ffff1602179055505062000c8b565b62000c91565b62000a3c565b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606560009054906101000a900461ffff1661ffff168361ffff161062000d11576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606660008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d83836040518363ffffffff1660e01b815260040162000d899291906200259b565b600060405180830381600087803b15801562000da457600080fd5b505af115801562000db9573d6000803e3d6000fd5b50505050505050565b60008060019054906101000a900460ff1615905080801562000df45750600160008054906101000a900460ff1660ff16105b8062000e25575062000e06306200185b565b15801562000e245750600160008054906101000a900460ff1660ff16145b5b62000e67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e5e90620026a5565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801562000ea5576001600060016101000a81548160ff0219169083151502179055505b81606760026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000ef06200187e565b801562000f4c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405162000f43919062002717565b60405180910390a15b5050565b606760009054906101000a900461ffff1681565b62000f6e6200161c565b606560009054906101000a900461ffff1661ffff16606760009054906101000a900461ffff1661ffff161062000fd0576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16606660006001606760009054906101000a900461ffff166200100b9190620025f0565b61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362001090576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606760008282829054906101000a900461ffff16620010b29190620025f0565b92506101000a81548161ffff021916908361ffff160217905550565b620010d86200161c565b600073ffffffffffffffffffffffffffffffffffffffff1660666000606560009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200119757806040517f9cfabd160000000000000000000000000000000000000000000000000000000081526004016200118e919062002125565b60405180910390fd5b6000819050606760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663331b6ab36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001247919062002779565b73ffffffffffffffffffffffffffffffffffffffff161462001294576040517eaec95400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606560009054906101000a900461ffff1661ffff168173ffffffffffffffffffffffffffffffffffffffff166328b070e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015620012f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200131b9190620027c2565b61ffff161462001357576040517fb893b72300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6200136282620016a1565b5050565b606560009054906101000a900461ffff1681565b620013846200161c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620013f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013ed906200286a565b60405180910390fd5b620014018162001795565b50565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000620014677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620018dc565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6200149a6200161c565b50565b620014cb7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b620018e6565b60000160009054906101000a900460ff1615620014f357620014ed83620018f0565b62001617565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156200155e57506040513d601f19601f820116820180604052508101906200155b9190620028bd565b60015b620015a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015979062002965565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811462001608576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015ff90620029fd565b60405180910390fd5b5062001616838383620019b0565b5b505050565b62001626620019e2565b73ffffffffffffffffffffffffffffffffffffffff166200164662000c95565b73ffffffffffffffffffffffffffffffffffffffff16146200169f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016969062002a6f565b60405180910390fd5b565b8060666000606560009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf6a3b406170499209d0fcf152a1605c7c5a5c99c855e2bb803433fc960718eb606560009054906101000a900461ffff16826040516200174e92919062002a91565b60405180910390a16001606560008282829054906101000a900461ffff16620017789190620025f0565b92506101000a81548161ffff021916908361ffff16021790555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16620018d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018c79062002b34565b60405180910390fd5b620018da620019ea565b565b6000819050919050565b6000819050919050565b620018fb8162001a52565b6200193d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019349062002bcc565b60405180910390fd5b806200196c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620018dc565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620019bb8362001a75565b600082511180620019c95750805b15620019dd57620019db838362001ac6565b505b505050565b600033905090565b600060019054906101000a900460ff1662001a3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a339062002b34565b60405180910390fd5b62001a5062001a4a620019e2565b62001795565b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b62001a8081620018f0565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606062001aee8383604051806060016040528060278152602001620042676027913962001af6565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405162001b22919062002c71565b600060405180830381855af49150503d806000811462001b5f576040519150601f19603f3d011682016040523d82523d6000602084013e62001b64565b606091505b509150915062001b778683838762001b82565b925050509392505050565b6060831562001bec57600083510362001be35762001ba08562001a52565b62001be2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001bd99062002cda565b60405180910390fd5b5b82905062001bf9565b62001bf8838362001c01565b5b949350505050565b60008251111562001c155781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001c4b919062002d48565b60405180910390fd5b6114fa8062002d6d83390190565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b62001c8f8162001c76565b811462001c9b57600080fd5b50565b60008135905062001caf8162001c84565b92915050565b6000819050919050565b62001cca8162001cb5565b811462001cd657600080fd5b50565b60008135905062001cea8162001cbf565b92915050565b6000806040838503121562001d0a5762001d0962001c6c565b5b600062001d1a8582860162001c9e565b925050602062001d2d8582860162001cd9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062001d8262001d7c62001d768462001d37565b62001d57565b62001d37565b9050919050565b600062001d968262001d61565b9050919050565b600062001daa8262001d89565b9050919050565b62001dbc8162001d9d565b82525050565b600060208201905062001dd9600083018462001db1565b92915050565b600062001dec8262001d37565b9050919050565b62001dfe8162001ddf565b811462001e0a57600080fd5b50565b60008135905062001e1e8162001df3565b92915050565b60006020828403121562001e3d5762001e3c62001c6c565b5b600062001e4d8482850162001e0d565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62001eab8262001e60565b810181811067ffffffffffffffff8211171562001ecd5762001ecc62001e71565b5b80604052505050565b600062001ee262001c62565b905062001ef0828262001ea0565b919050565b600067ffffffffffffffff82111562001f135762001f1262001e71565b5b62001f1e8262001e60565b9050602081019050919050565b82818337600083830152505050565b600062001f5162001f4b8462001ef5565b62001ed6565b90508281526020810184848401111562001f705762001f6f62001e5b565b5b62001f7d84828562001f2b565b509392505050565b600082601f83011262001f9d5762001f9c62001e56565b5b813562001faf84826020860162001f3a565b91505092915050565b6000806040838503121562001fd25762001fd162001c6c565b5b600062001fe28582860162001e0d565b925050602083013567ffffffffffffffff81111562002006576200200562001c71565b5b620020148582860162001f85565b9150509250929050565b6000819050919050565b62002033816200201e565b82525050565b600060208201905062002050600083018462002028565b92915050565b600080fd5b600080fd5b60008083601f84011262002079576200207862001e56565b5b8235905067ffffffffffffffff81111562002099576200209862002056565b5b602083019150836020820283011115620020b857620020b76200205b565b5b9250929050565b60008060208385031215620020d957620020d862001c6c565b5b600083013567ffffffffffffffff811115620020fa57620020f962001c71565b5b620021088582860162002060565b92509250509250929050565b6200211f8162001ddf565b82525050565b60006020820190506200213c600083018462002114565b92915050565b6000806000604084860312156200215e576200215d62001c6c565b5b60006200216e8682870162001c9e565b935050602084013567ffffffffffffffff81111562002192576200219162001c71565b5b620021a08682870162002060565b92509250509250925092565b620021b78162001c76565b82525050565b6000602082019050620021d46000830184620021ac565b92915050565b600060208284031215620021f357620021f262001c6c565b5b6000620022038482850162001c9e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620022728162001cb5565b82525050565b600062002286838362002267565b60208301905092915050565b6000602082019050919050565b6000620022ac826200223b565b620022b8818562002246565b9350620022c58362002257565b8060005b83811015620022fc578151620022e0888262002278565b9750620022ed8362002292565b925050600181019050620022c9565b5085935050505092915050565b600060208201905081810360008301526200232581846200229f565b905092915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006200239c602c836200232d565b9150620023a9826200233e565b604082019050919050565b60006020820190508181036000830152620023cf816200238d565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b600062002434602c836200232d565b91506200244182620023d6565b604082019050919050565b60006020820190508181036000830152620024678162002425565b9050919050565b600060408201905062002485600083018562002114565b620024946020830184620021ac565b9392505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000620024f96038836200232d565b915062002506826200249b565b604082019050919050565b600060208201905081810360008301526200252c81620024ea565b9050919050565b600080fd5b600062002546838562002246565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156200257c576200257b62002533565b5b6020830292506200258f83858462001f2b565b82840190509392505050565b60006020820190508181036000830152620025b881848662002538565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620025fd8262001c76565b91506200260a8362001c76565b92508261ffff03821115620026245762002623620025c1565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006200268d602e836200232d565b91506200269a826200262f565b604082019050919050565b60006020820190508181036000830152620026c0816200267e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000620026ff620026f9620026f384620026c7565b62001d57565b620026d1565b9050919050565b6200271181620026de565b82525050565b60006020820190506200272e600083018462002706565b92915050565b6000620027418262001ddf565b9050919050565b620027538162002734565b81146200275f57600080fd5b50565b600081519050620027738162002748565b92915050565b60006020828403121562002792576200279162001c6c565b5b6000620027a28482850162002762565b91505092915050565b600081519050620027bc8162001c84565b92915050565b600060208284031215620027db57620027da62001c6c565b5b6000620027eb84828501620027ab565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620028526026836200232d565b91506200285f82620027f4565b604082019050919050565b60006020820190508181036000830152620028858162002843565b9050919050565b62002897816200201e565b8114620028a357600080fd5b50565b600081519050620028b7816200288c565b92915050565b600060208284031215620028d657620028d562001c6c565b5b6000620028e684828501620028a6565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b60006200294d602e836200232d565b91506200295a82620028ef565b604082019050919050565b6000602082019050818103600083015262002980816200293e565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000620029e56029836200232d565b9150620029f28262002987565b604082019050919050565b6000602082019050818103600083015262002a1881620029d6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062002a576020836200232d565b915062002a648262002a1f565b602082019050919050565b6000602082019050818103600083015262002a8a8162002a48565b9050919050565b600060408201905062002aa86000830185620021ac565b62002ab7602083018462002114565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600062002b1c602b836200232d565b915062002b298262002abe565b604082019050919050565b6000602082019050818103600083015262002b4f8162002b0d565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062002bb4602d836200232d565b915062002bc18262002b56565b604082019050919050565b6000602082019050818103600083015262002be78162002ba5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101562002c2457808201518184015260208101905062002c07565b8381111562002c34576000848401525b50505050565b600062002c478262002bee565b62002c53818562002bf9565b935062002c6581856020860162002c04565b80840191505092915050565b600062002c7f828462002c3a565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600062002cc2601d836200232d565b915062002ccf8262002c8a565b602082019050919050565b6000602082019050818103600083015262002cf58162002cb3565b9050919050565b600081519050919050565b600062002d148262002cfc565b62002d2081856200232d565b935062002d3281856020860162002c04565b62002d3d8162001e60565b840191505092915050565b6000602082019050818103600083015262002d64818462002d07565b90509291505056fe61016060405260006001553480156200001757600080fd5b50604051620014fa380380620014fa83398181016040528101906200003d919062000290565b6000601483600062000064620000586200011b60201b60201c565b6200012360201b60201c565b83608081815250508260a08181525050826001901b60c081815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250504363ffffffff166101208163ffffffff1681525050505050508061ffff166101408161ffff16815250505050620002d7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021982620001ec565b9050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600061ffff82169050919050565b6200026a8162000251565b81146200027657600080fd5b50565b6000815190506200028a816200025f565b92915050565b60008060408385031215620002aa57620002a9620001e7565b5b6000620002ba858286016200023a565b9250506020620002cd8582860162000279565b9150509250929050565b60805160a05160c05160e0516101005161012051610140516111ba620003406000396000610545015260006105e3015260006105690152600081816104ac015261058d0152600081816107560152610aea015260006106fc015260006107ac01526111ba6000f3fe60806040526004361061011f5760003560e01c80638be9b119116100a0578063c5b208ff11610064578063c5b208ff146103c5578063d0383d6814610402578063f207564e1461042d578063f220b9ec14610449578063f2fde38b146104745761011f565b80638be9b119146102de5780638da5cb5b1461030757806398366e3514610332578063ae74552a1461035d578063bc499128146103885761011f565b80634add651e116100e75780634add651e146101f95780635daf08ca146102245780636bdcc8ab14610261578063715018a61461029e5780637a34289d146102b55761011f565b806322d9730c1461012457806328b070e0146101615780632b7ac3f31461018c578063331b6ab3146101b75780633ccfd60b146101e2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190610b86565b61049d565b6040516101589190610bce565b60405180910390f35b34801561016d57600080fd5b50610176610543565b6040516101839190610c06565b60405180910390f35b34801561019857600080fd5b506101a1610567565b6040516101ae9190610ca0565b60405180910390f35b3480156101c357600080fd5b506101cc61058b565b6040516101d99190610cdc565b60405180910390f35b3480156101ee57600080fd5b506101f76105af565b005b34801561020557600080fd5b5061020e6105e1565b60405161021b9190610d16565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190610b86565b610605565b6040516102589190610d40565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190610b86565b61061d565b6040516102959190610bce565b60405180910390f35b3480156102aa57600080fd5b506102b361063d565b005b3480156102c157600080fd5b506102dc60048036038101906102d79190610dc0565b610651565b005b3480156102ea57600080fd5b5061030560048036038101906103009190610e6d565b61069f565b005b34801561031357600080fd5b5061031c6106d1565b6040516103299190610ee2565b60405180910390f35b34801561033e57600080fd5b506103476106fa565b6040516103549190610d40565b60405180910390f35b34801561036957600080fd5b5061037261071e565b60405161037f9190610d40565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190610b86565b610724565b6040516103bc9190610d40565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190610f29565b61073c565b6040516103f99190610d40565b60405180910390f35b34801561040e57600080fd5b50610417610754565b6040516104249190610d40565b60405180910390f35b61044760048036038101906104429190610b86565b610778565b005b34801561045557600080fd5b5061045e6107aa565b60405161046b9190610d40565b60405180910390f35b34801561048057600080fd5b5061049b60048036038101906104969190610f29565b6107ce565b005b600080821415801561053c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e493ef8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610f6b565b82105b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020528060005260406000206000915090505481565b60046020528060005260406000206000915054906101000a900460ff1681565b610645610851565b61064f60006108cf565b565b610659610851565b600082829050905060005b818110156106995761068e84848381811061068257610681610f98565b5b90506020020135610993565b806001019050610664565b50505050565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6107d6610851565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061104a565b60405180910390fd5b61084e816108cf565b50565b610859610a39565b73ffffffffffffffffffffffffffffffffffffffff166108776106d1565b73ffffffffffffffffffffffffffffffffffffffff16146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906110b6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61099c81610a41565b600154600360008381526020019081526020016000208190555060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d281600154604051610a159291906110d6565b60405180910390a16001806000828254610a2f919061112e565b9250508190555050565b600033905090565b610a4a8161049d565b610a8b57806040517f7f3e75af000000000000000000000000000000000000000000000000000000008152600401610a829190610d40565b60405180910390fd5b600115156004600083815260200190815260200160002060009054906101000a900460ff16151503610ae8576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015410610b43576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080fd5b600080fd5b6000819050919050565b610b6381610b50565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b600060208284031215610b9c57610b9b610b46565b5b6000610baa84828501610b71565b91505092915050565b60008115159050919050565b610bc881610bb3565b82525050565b6000602082019050610be36000830184610bbf565b92915050565b600061ffff82169050919050565b610c0081610be9565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c66610c61610c5c84610c21565b610c41565b610c21565b9050919050565b6000610c7882610c4b565b9050919050565b6000610c8a82610c6d565b9050919050565b610c9a81610c7f565b82525050565b6000602082019050610cb56000830184610c91565b92915050565b6000610cc682610c6d565b9050919050565b610cd681610cbb565b82525050565b6000602082019050610cf16000830184610ccd565b92915050565b600063ffffffff82169050919050565b610d1081610cf7565b82525050565b6000602082019050610d2b6000830184610d07565b92915050565b610d3a81610b50565b82525050565b6000602082019050610d556000830184610d31565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8057610d7f610d5b565b5b8235905067ffffffffffffffff811115610d9d57610d9c610d60565b5b602083019150836020820283011115610db957610db8610d65565b5b9250929050565b60008060208385031215610dd757610dd6610b46565b5b600083013567ffffffffffffffff811115610df557610df4610b4b565b5b610e0185828601610d6a565b92509250509250929050565b6000610e1882610c21565b9050919050565b610e2881610e0d565b8114610e3357600080fd5b50565b600081359050610e4581610e1f565b92915050565b600081905082602060080282011115610e6757610e66610d65565b5b92915050565b60008060006101408486031215610e8757610e86610b46565b5b6000610e9586828701610b71565b9350506020610ea686828701610e36565b9250506040610eb786828701610e4b565b9150509250925092565b6000610ecc82610c21565b9050919050565b610edc81610ec1565b82525050565b6000602082019050610ef76000830184610ed3565b92915050565b610f0681610ec1565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610b46565b5b6000610f4d84828501610f14565b91505092915050565b600081519050610f6581610b5a565b92915050565b600060208284031215610f8157610f80610b46565b5b6000610f8f84828501610f56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611034602683610fc7565b915061103f82610fd8565b604082019050919050565b6000602082019050818103600083015261106381611027565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110a0602083610fc7565b91506110ab8261106a565b602082019050919050565b600060208201905081810360008301526110cf81611093565b9050919050565b60006040820190506110eb6000830185610d31565b6110f86020830184610d31565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113982610b50565b915061114483610b50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611179576111786110ff565b5b82820190509291505056fea264697066735822122080702afa180498dc14ee9cd29cf35aa3eed2f3db78ee1fdb9b4ebf005387d01b64736f6c634300080f0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ef23e762c66c99dc19074eafc1b1183231eeb13cd3d64ace0d2c6e4f954fc96264736f6c634300080f0033",
  "deployedBytecode": "0x608060405260043610620001165760003560e01c80638da5cb5b11620000a3578063d44fda1f116200006d578063d44fda1f1462000315578063ef653d5e146200032f578063f184ef4c146200035d578063f2fde38b146200038d578063f554214714620003bb5762000116565b80638da5cb5b1462000259578063ab02492a1462000289578063c4d66de814620002b7578063cf61637414620002e55762000116565b80634f1ef28611620000e55780634f1ef28614620001c157806352d1902d14620001e1578063715018a614620002115780637a34289d146200022b5762000116565b806326e0fc1f146200011b578063331b6ab314620001495780633659cfe6146200017957806342f542e214620001a7575b600080fd5b3480156200012857600080fd5b5062000147600480360381019062000141919062001cf0565b620003ff565b005b3480156200015657600080fd5b506200016162000576565b60405162000170919062001dc2565b60405180910390f35b3480156200018657600080fd5b50620001a560048036038101906200019f919062001e24565b6200059c565b005b348015620001b457600080fd5b50620001bf62000734565b005b620001df6004803603810190620001d9919062001fb8565b620007bd565b005b348015620001ee57600080fd5b50620001f962000905565b60405162000208919062002039565b60405180910390f35b3480156200021e57600080fd5b5062000229620009c1565b005b3480156200023857600080fd5b50620002576004803603810190620002519190620020bf565b620009d9565b005b3480156200026657600080fd5b506200027162000c95565b60405162000280919062002125565b60405180910390f35b3480156200029657600080fd5b50620002b56004803603810190620002af919062002142565b62000cbf565b005b348015620002c457600080fd5b50620002e36004803603810190620002dd919062001e24565b62000dc2565b005b348015620002f257600080fd5b50620002fd62000f50565b6040516200030c9190620021bd565b60405180910390f35b3480156200032257600080fd5b506200032d62000f64565b005b3480156200033c57600080fd5b506200035b600480360381019062000355919062001e24565b620010ce565b005b3480156200036a57600080fd5b506200037562001366565b604051620003849190620021bd565b60405180910390f35b3480156200039a57600080fd5b50620003b96004803603810190620003b3919062001e24565b6200137a565b005b348015620003c857600080fd5b50620003e76004803603810190620003e19190620021da565b62001404565b604051620003f6919062002125565b60405180910390f35b606560009054906101000a900461ffff1661ffff168261ffff161062000451576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600167ffffffffffffffff81111562000471576200047062001e71565b5b604051908082528060200260200182016040528015620004a05781602001602082028036833780820191505090505b5090508181600081518110620004bb57620004ba6200220c565b5b602002602001018181525050606660008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d826040518263ffffffff1660e01b81526004016200053d919062002309565b600060405180830381600087803b1580156200055857600080fd5b505af11580156200056d573d6000803e3d6000fd5b50505050505050565b606760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036200062d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200062490620023b4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166200066e62001437565b73ffffffffffffffffffffffffffffffffffffffff1614620006c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006be906200244c565b60405180910390fd5b620006d28162001490565b6200073181600067ffffffffffffffff811115620006f557620006f462001e71565b5b6040519080825280601f01601f191660200182016040528015620007285781602001600182028036833780820191505090505b5060006200149d565b50565b6200073e6200161c565b6000606760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900461ffff16604051620007829062001c54565b6200078f9291906200246e565b604051809103906000f080158015620007ac573d6000803e3d6000fd5b509050620007ba81620016a1565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036200084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200084590620023b4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166200088f62001437565b73ffffffffffffffffffffffffffffffffffffffff1614620008e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008df906200244c565b60405180910390fd5b620008f38262001490565b62000901828260016200149d565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161462000998576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200098f9062002511565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b620009cb6200161c565b620009d7600062001795565b565b606560009054906101000a900461ffff1661ffff16606760009054906101000a900461ffff1661ffff161062000a3b576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60011562000c915760666000606760009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d83836040518363ffffffff1660e01b815260040162000acc9291906200259b565b600060405180830381600087803b15801562000ae757600080fd5b505af192505050801562000af9575060015b62000c85573d806000811462000b2c576040519150601f19603f3d011682016040523d82523d6000602084013e62000b31565b606091505b506040516024016040516020818303038152906040527f57f69531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508051906020012081805190602001201462000bd257805181602001fd5b606560009054906101000a900461ffff1661ffff166001606760009054906101000a900461ffff1662000c069190620025f0565b61ffff161062000c42576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606760008282829054906101000a900461ffff1662000c649190620025f0565b92506101000a81548161ffff021916908361ffff1602179055505062000c8b565b62000c91565b62000a3c565b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606560009054906101000a900461ffff1661ffff168361ffff161062000d11576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606660008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d83836040518363ffffffff1660e01b815260040162000d899291906200259b565b600060405180830381600087803b15801562000da457600080fd5b505af115801562000db9573d6000803e3d6000fd5b50505050505050565b60008060019054906101000a900460ff1615905080801562000df45750600160008054906101000a900460ff1660ff16105b8062000e25575062000e06306200185b565b15801562000e245750600160008054906101000a900460ff1660ff16145b5b62000e67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e5e90620026a5565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801562000ea5576001600060016101000a81548160ff0219169083151502179055505b81606760026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000ef06200187e565b801562000f4c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405162000f43919062002717565b60405180910390a15b5050565b606760009054906101000a900461ffff1681565b62000f6e6200161c565b606560009054906101000a900461ffff1661ffff16606760009054906101000a900461ffff1661ffff161062000fd0576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16606660006001606760009054906101000a900461ffff166200100b9190620025f0565b61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362001090576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606760008282829054906101000a900461ffff16620010b29190620025f0565b92506101000a81548161ffff021916908361ffff160217905550565b620010d86200161c565b600073ffffffffffffffffffffffffffffffffffffffff1660666000606560009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200119757806040517f9cfabd160000000000000000000000000000000000000000000000000000000081526004016200118e919062002125565b60405180910390fd5b6000819050606760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663331b6ab36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001247919062002779565b73ffffffffffffffffffffffffffffffffffffffff161462001294576040517eaec95400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606560009054906101000a900461ffff1661ffff168173ffffffffffffffffffffffffffffffffffffffff166328b070e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015620012f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200131b9190620027c2565b61ffff161462001357576040517fb893b72300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6200136282620016a1565b5050565b606560009054906101000a900461ffff1681565b620013846200161c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620013f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013ed906200286a565b60405180910390fd5b620014018162001795565b50565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000620014677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620018dc565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6200149a6200161c565b50565b620014cb7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b620018e6565b60000160009054906101000a900460ff1615620014f357620014ed83620018f0565b62001617565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156200155e57506040513d601f19601f820116820180604052508101906200155b9190620028bd565b60015b620015a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015979062002965565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811462001608576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015ff90620029fd565b60405180910390fd5b5062001616838383620019b0565b5b505050565b62001626620019e2565b73ffffffffffffffffffffffffffffffffffffffff166200164662000c95565b73ffffffffffffffffffffffffffffffffffffffff16146200169f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016969062002a6f565b60405180910390fd5b565b8060666000606560009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf6a3b406170499209d0fcf152a1605c7c5a5c99c855e2bb803433fc960718eb606560009054906101000a900461ffff16826040516200174e92919062002a91565b60405180910390a16001606560008282829054906101000a900461ffff16620017789190620025f0565b92506101000a81548161ffff021916908361ffff16021790555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16620018d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018c79062002b34565b60405180910390fd5b620018da620019ea565b565b6000819050919050565b6000819050919050565b620018fb8162001a52565b6200193d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019349062002bcc565b60405180910390fd5b806200196c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620018dc565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620019bb8362001a75565b600082511180620019c95750805b15620019dd57620019db838362001ac6565b505b505050565b600033905090565b600060019054906101000a900460ff1662001a3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a339062002b34565b60405180910390fd5b62001a5062001a4a620019e2565b62001795565b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b62001a8081620018f0565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606062001aee8383604051806060016040528060278152602001620042676027913962001af6565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405162001b22919062002c71565b600060405180830381855af49150503d806000811462001b5f576040519150601f19603f3d011682016040523d82523d6000602084013e62001b64565b606091505b509150915062001b778683838762001b82565b925050509392505050565b6060831562001bec57600083510362001be35762001ba08562001a52565b62001be2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001bd99062002cda565b60405180910390fd5b5b82905062001bf9565b62001bf8838362001c01565b5b949350505050565b60008251111562001c155781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001c4b919062002d48565b60405180910390fd5b6114fa8062002d6d83390190565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b62001c8f8162001c76565b811462001c9b57600080fd5b50565b60008135905062001caf8162001c84565b92915050565b6000819050919050565b62001cca8162001cb5565b811462001cd657600080fd5b50565b60008135905062001cea8162001cbf565b92915050565b6000806040838503121562001d0a5762001d0962001c6c565b5b600062001d1a8582860162001c9e565b925050602062001d2d8582860162001cd9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062001d8262001d7c62001d768462001d37565b62001d57565b62001d37565b9050919050565b600062001d968262001d61565b9050919050565b600062001daa8262001d89565b9050919050565b62001dbc8162001d9d565b82525050565b600060208201905062001dd9600083018462001db1565b92915050565b600062001dec8262001d37565b9050919050565b62001dfe8162001ddf565b811462001e0a57600080fd5b50565b60008135905062001e1e8162001df3565b92915050565b60006020828403121562001e3d5762001e3c62001c6c565b5b600062001e4d8482850162001e0d565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62001eab8262001e60565b810181811067ffffffffffffffff8211171562001ecd5762001ecc62001e71565b5b80604052505050565b600062001ee262001c62565b905062001ef0828262001ea0565b919050565b600067ffffffffffffffff82111562001f135762001f1262001e71565b5b62001f1e8262001e60565b9050602081019050919050565b82818337600083830152505050565b600062001f5162001f4b8462001ef5565b62001ed6565b90508281526020810184848401111562001f705762001f6f62001e5b565b5b62001f7d84828562001f2b565b509392505050565b600082601f83011262001f9d5762001f9c62001e56565b5b813562001faf84826020860162001f3a565b91505092915050565b6000806040838503121562001fd25762001fd162001c6c565b5b600062001fe28582860162001e0d565b925050602083013567ffffffffffffffff81111562002006576200200562001c71565b5b620020148582860162001f85565b9150509250929050565b6000819050919050565b62002033816200201e565b82525050565b600060208201905062002050600083018462002028565b92915050565b600080fd5b600080fd5b60008083601f84011262002079576200207862001e56565b5b8235905067ffffffffffffffff81111562002099576200209862002056565b5b602083019150836020820283011115620020b857620020b76200205b565b5b9250929050565b60008060208385031215620020d957620020d862001c6c565b5b600083013567ffffffffffffffff811115620020fa57620020f962001c71565b5b620021088582860162002060565b92509250509250929050565b6200211f8162001ddf565b82525050565b60006020820190506200213c600083018462002114565b92915050565b6000806000604084860312156200215e576200215d62001c6c565b5b60006200216e8682870162001c9e565b935050602084013567ffffffffffffffff81111562002192576200219162001c71565b5b620021a08682870162002060565b92509250509250925092565b620021b78162001c76565b82525050565b6000602082019050620021d46000830184620021ac565b92915050565b600060208284031215620021f357620021f262001c6c565b5b6000620022038482850162001c9e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620022728162001cb5565b82525050565b600062002286838362002267565b60208301905092915050565b6000602082019050919050565b6000620022ac826200223b565b620022b8818562002246565b9350620022c58362002257565b8060005b83811015620022fc578151620022e0888262002278565b9750620022ed8362002292565b925050600181019050620022c9565b5085935050505092915050565b600060208201905081810360008301526200232581846200229f565b905092915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006200239c602c836200232d565b9150620023a9826200233e565b604082019050919050565b60006020820190508181036000830152620023cf816200238d565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b600062002434602c836200232d565b91506200244182620023d6565b604082019050919050565b60006020820190508181036000830152620024678162002425565b9050919050565b600060408201905062002485600083018562002114565b620024946020830184620021ac565b9392505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000620024f96038836200232d565b915062002506826200249b565b604082019050919050565b600060208201905081810360008301526200252c81620024ea565b9050919050565b600080fd5b600062002546838562002246565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156200257c576200257b62002533565b5b6020830292506200258f83858462001f2b565b82840190509392505050565b60006020820190508181036000830152620025b881848662002538565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620025fd8262001c76565b91506200260a8362001c76565b92508261ffff03821115620026245762002623620025c1565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006200268d602e836200232d565b91506200269a826200262f565b604082019050919050565b60006020820190508181036000830152620026c0816200267e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000620026ff620026f9620026f384620026c7565b62001d57565b620026d1565b9050919050565b6200271181620026de565b82525050565b60006020820190506200272e600083018462002706565b92915050565b6000620027418262001ddf565b9050919050565b620027538162002734565b81146200275f57600080fd5b50565b600081519050620027738162002748565b92915050565b60006020828403121562002792576200279162001c6c565b5b6000620027a28482850162002762565b91505092915050565b600081519050620027bc8162001c84565b92915050565b600060208284031215620027db57620027da62001c6c565b5b6000620027eb84828501620027ab565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620028526026836200232d565b91506200285f82620027f4565b604082019050919050565b60006020820190508181036000830152620028858162002843565b9050919050565b62002897816200201e565b8114620028a357600080fd5b50565b600081519050620028b7816200288c565b92915050565b600060208284031215620028d657620028d562001c6c565b5b6000620028e684828501620028a6565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b60006200294d602e836200232d565b91506200295a82620028ef565b604082019050919050565b6000602082019050818103600083015262002980816200293e565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000620029e56029836200232d565b9150620029f28262002987565b604082019050919050565b6000602082019050818103600083015262002a1881620029d6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062002a576020836200232d565b915062002a648262002a1f565b602082019050919050565b6000602082019050818103600083015262002a8a8162002a48565b9050919050565b600060408201905062002aa86000830185620021ac565b62002ab7602083018462002114565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600062002b1c602b836200232d565b915062002b298262002abe565b604082019050919050565b6000602082019050818103600083015262002b4f8162002b0d565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062002bb4602d836200232d565b915062002bc18262002b56565b604082019050919050565b6000602082019050818103600083015262002be78162002ba5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101562002c2457808201518184015260208101905062002c07565b8381111562002c34576000848401525b50505050565b600062002c478262002bee565b62002c53818562002bf9565b935062002c6581856020860162002c04565b80840191505092915050565b600062002c7f828462002c3a565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600062002cc2601d836200232d565b915062002ccf8262002c8a565b602082019050919050565b6000602082019050818103600083015262002cf58162002cb3565b9050919050565b600081519050919050565b600062002d148262002cfc565b62002d2081856200232d565b935062002d3281856020860162002c04565b62002d3d8162001e60565b840191505092915050565b6000602082019050818103600083015262002d64818462002d07565b90509291505056fe61016060405260006001553480156200001757600080fd5b50604051620014fa380380620014fa83398181016040528101906200003d919062000290565b6000601483600062000064620000586200011b60201b60201c565b6200012360201b60201c565b83608081815250508260a08181525050826001901b60c081815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250504363ffffffff166101208163ffffffff1681525050505050508061ffff166101408161ffff16815250505050620002d7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021982620001ec565b9050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600061ffff82169050919050565b6200026a8162000251565b81146200027657600080fd5b50565b6000815190506200028a816200025f565b92915050565b60008060408385031215620002aa57620002a9620001e7565b5b6000620002ba858286016200023a565b9250506020620002cd8582860162000279565b9150509250929050565b60805160a05160c05160e0516101005161012051610140516111ba620003406000396000610545015260006105e3015260006105690152600081816104ac015261058d0152600081816107560152610aea015260006106fc015260006107ac01526111ba6000f3fe60806040526004361061011f5760003560e01c80638be9b119116100a0578063c5b208ff11610064578063c5b208ff146103c5578063d0383d6814610402578063f207564e1461042d578063f220b9ec14610449578063f2fde38b146104745761011f565b80638be9b119146102de5780638da5cb5b1461030757806398366e3514610332578063ae74552a1461035d578063bc499128146103885761011f565b80634add651e116100e75780634add651e146101f95780635daf08ca146102245780636bdcc8ab14610261578063715018a61461029e5780637a34289d146102b55761011f565b806322d9730c1461012457806328b070e0146101615780632b7ac3f31461018c578063331b6ab3146101b75780633ccfd60b146101e2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190610b86565b61049d565b6040516101589190610bce565b60405180910390f35b34801561016d57600080fd5b50610176610543565b6040516101839190610c06565b60405180910390f35b34801561019857600080fd5b506101a1610567565b6040516101ae9190610ca0565b60405180910390f35b3480156101c357600080fd5b506101cc61058b565b6040516101d99190610cdc565b60405180910390f35b3480156101ee57600080fd5b506101f76105af565b005b34801561020557600080fd5b5061020e6105e1565b60405161021b9190610d16565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190610b86565b610605565b6040516102589190610d40565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190610b86565b61061d565b6040516102959190610bce565b60405180910390f35b3480156102aa57600080fd5b506102b361063d565b005b3480156102c157600080fd5b506102dc60048036038101906102d79190610dc0565b610651565b005b3480156102ea57600080fd5b5061030560048036038101906103009190610e6d565b61069f565b005b34801561031357600080fd5b5061031c6106d1565b6040516103299190610ee2565b60405180910390f35b34801561033e57600080fd5b506103476106fa565b6040516103549190610d40565b60405180910390f35b34801561036957600080fd5b5061037261071e565b60405161037f9190610d40565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190610b86565b610724565b6040516103bc9190610d40565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190610f29565b61073c565b6040516103f99190610d40565b60405180910390f35b34801561040e57600080fd5b50610417610754565b6040516104249190610d40565b60405180910390f35b61044760048036038101906104429190610b86565b610778565b005b34801561045557600080fd5b5061045e6107aa565b60405161046b9190610d40565b60405180910390f35b34801561048057600080fd5b5061049b60048036038101906104969190610f29565b6107ce565b005b600080821415801561053c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e493ef8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610f6b565b82105b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020528060005260406000206000915090505481565b60046020528060005260406000206000915054906101000a900460ff1681565b610645610851565b61064f60006108cf565b565b610659610851565b600082829050905060005b818110156106995761068e84848381811061068257610681610f98565b5b90506020020135610993565b806001019050610664565b50505050565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6107d6610851565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061104a565b60405180910390fd5b61084e816108cf565b50565b610859610a39565b73ffffffffffffffffffffffffffffffffffffffff166108776106d1565b73ffffffffffffffffffffffffffffffffffffffff16146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906110b6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61099c81610a41565b600154600360008381526020019081526020016000208190555060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d281600154604051610a159291906110d6565b60405180910390a16001806000828254610a2f919061112e565b9250508190555050565b600033905090565b610a4a8161049d565b610a8b57806040517f7f3e75af000000000000000000000000000000000000000000000000000000008152600401610a829190610d40565b60405180910390fd5b600115156004600083815260200190815260200160002060009054906101000a900460ff16151503610ae8576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015410610b43576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080fd5b600080fd5b6000819050919050565b610b6381610b50565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b600060208284031215610b9c57610b9b610b46565b5b6000610baa84828501610b71565b91505092915050565b60008115159050919050565b610bc881610bb3565b82525050565b6000602082019050610be36000830184610bbf565b92915050565b600061ffff82169050919050565b610c0081610be9565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c66610c61610c5c84610c21565b610c41565b610c21565b9050919050565b6000610c7882610c4b565b9050919050565b6000610c8a82610c6d565b9050919050565b610c9a81610c7f565b82525050565b6000602082019050610cb56000830184610c91565b92915050565b6000610cc682610c6d565b9050919050565b610cd681610cbb565b82525050565b6000602082019050610cf16000830184610ccd565b92915050565b600063ffffffff82169050919050565b610d1081610cf7565b82525050565b6000602082019050610d2b6000830184610d07565b92915050565b610d3a81610b50565b82525050565b6000602082019050610d556000830184610d31565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8057610d7f610d5b565b5b8235905067ffffffffffffffff811115610d9d57610d9c610d60565b5b602083019150836020820283011115610db957610db8610d65565b5b9250929050565b60008060208385031215610dd757610dd6610b46565b5b600083013567ffffffffffffffff811115610df557610df4610b4b565b5b610e0185828601610d6a565b92509250509250929050565b6000610e1882610c21565b9050919050565b610e2881610e0d565b8114610e3357600080fd5b50565b600081359050610e4581610e1f565b92915050565b600081905082602060080282011115610e6757610e66610d65565b5b92915050565b60008060006101408486031215610e8757610e86610b46565b5b6000610e9586828701610b71565b9350506020610ea686828701610e36565b9250506040610eb786828701610e4b565b9150509250925092565b6000610ecc82610c21565b9050919050565b610edc81610ec1565b82525050565b6000602082019050610ef76000830184610ed3565b92915050565b610f0681610ec1565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610b46565b5b6000610f4d84828501610f14565b91505092915050565b600081519050610f6581610b5a565b92915050565b600060208284031215610f8157610f80610b46565b5b6000610f8f84828501610f56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611034602683610fc7565b915061103f82610fd8565b604082019050919050565b6000602082019050818103600083015261106381611027565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110a0602083610fc7565b91506110ab8261106a565b602082019050919050565b600060208201905081810360008301526110cf81611093565b9050919050565b60006040820190506110eb6000830185610d31565b6110f86020830184610d31565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113982610b50565b915061114483610b50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611179576111786110ff565b5b82820190509291505056fea264697066735822122080702afa180498dc14ee9cd29cf35aa3eed2f3db78ee1fdb9b4ebf005387d01b64736f6c634300080f0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ef23e762c66c99dc19074eafc1b1183231eeb13cd3d64ace0d2c6e4f954fc96264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 655,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 658,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1188,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 527,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 647,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 217,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "nextStorageIndex",
        "offset": 0,
        "slot": "101",
        "type": "t_uint16"
      },
      {
        "astId": 221,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "storages",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 224,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "usingStorageIndex",
        "offset": 0,
        "slot": "103",
        "type": "t_uint16"
      },
      {
        "astId": 227,
        "contract": "contracts/WakuRlnRegistry.sol:WakuRlnRegistry",
        "label": "poseidonHasher",
        "offset": 2,
        "slot": "103",
        "type": "t_contract(IPoseidonHasher)2351"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoseidonHasher)2351": {
        "encoding": "inplace",
        "label": "contract IPoseidonHasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
