{
  "language": "Solidity",
  "sources": {
    "contracts/LazyIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport {PoseidonT3} from \"poseidon-solidity/PoseidonT3.sol\";\n\nstruct LazyIMTData {\n    uint32 maxIndex;\n    uint40 numberOfLeaves;\n    mapping(uint256 => uint256) elements;\n}\n\nlibrary LazyIMT {\n    uint256 public constant SNARK_SCALAR_FIELD =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint8 public constant MAX_DEPTH = 32;\n    uint40 public constant MAX_INDEX = (1 << 32) - 1;\n\n    function init(LazyIMTData storage self, uint8 depth) public {\n        require(depth <= MAX_DEPTH, \"LazyIMT: Tree too large\");\n        self.maxIndex = uint32((1 << depth) - 1);\n        self.numberOfLeaves = 0;\n    }\n\n    function reset(LazyIMTData storage self) public {\n        self.numberOfLeaves = 0;\n    }\n\n    function indexForElement(uint8 level, uint40 index) public pure returns (uint40) {\n        // store the elements sparsely\n        return MAX_INDEX * level + index;\n    }\n\n    function insert(LazyIMTData storage self, uint256 leaf) public {\n        uint40 index = self.numberOfLeaves;\n        require(leaf < SNARK_SCALAR_FIELD, \"LazyIMT: leaf must be < SNARK_SCALAR_FIELD\");\n        require(index < self.maxIndex, \"LazyIMT: tree is full\");\n\n        self.numberOfLeaves = index + 1;\n\n        uint256 hash = leaf;\n\n        for (uint8 i = 0; ; ) {\n            self.elements[indexForElement(i, index)] = hash;\n            // it's a left element so we don't hash until there's a right element\n            if (index & 1 == 0) break;\n            uint40 elementIndex = indexForElement(i, index - 1);\n            hash = PoseidonT3.hash([self.elements[elementIndex], hash]);\n            unchecked {\n                index >>= 1;\n                i++;\n            }\n        }\n    }\n\n    function update(LazyIMTData storage self, uint256 leaf, uint40 index) public {\n        require(leaf < SNARK_SCALAR_FIELD, \"LazyIMT: leaf must be < SNARK_SCALAR_FIELD\");\n        uint40 numberOfLeaves = self.numberOfLeaves;\n        require(index < numberOfLeaves, \"LazyIMT: leaf must exist\");\n\n        uint256 hash = leaf;\n\n        for (uint8 i = 0; true; ) {\n            self.elements[indexForElement(i, index)] = hash;\n            uint256 levelCount = numberOfLeaves >> (i + 1);\n            if (levelCount <= index >> 1) break;\n            if (index & 1 == 0) {\n                uint40 elementIndex = indexForElement(i, index + 1);\n                hash = PoseidonT3.hash([hash, self.elements[elementIndex]]);\n            } else {\n                uint40 elementIndex = indexForElement(i, index - 1);\n                hash = PoseidonT3.hash([self.elements[elementIndex], hash]);\n            }\n            unchecked {\n                index >>= 1;\n                i++;\n            }\n        }\n    }\n\n    function root(LazyIMTData storage self) public view returns (uint256) {\n        // this will always short circuit if self.numberOfLeaves == 0\n        uint40 numberOfLeaves = self.numberOfLeaves;\n        if (numberOfLeaves == 0) return defaultZero(1);\n        uint40 index = numberOfLeaves - 1;\n\n        uint256[MAX_DEPTH + 1] memory levels;\n\n        if (index & 1 == 0) {\n            levels[0] = self.elements[indexForElement(0, index)];\n        } else {\n            levels[0] = defaultZero(0);\n        }\n        // dynamically determine a depth\n        uint8 depth = 1;\n        while (uint8(2) ** depth < numberOfLeaves) {\n            depth++;\n        }\n        for (uint8 i = 0; i < depth; ) {\n            if (index & 1 == 0) {\n                levels[i + 1] = PoseidonT3.hash([levels[i], defaultZero(i)]);\n            } else {\n                uint256 levelCount = (numberOfLeaves) >> (i + 1);\n                if (levelCount > index >> 1) {\n                    uint256 parent = self.elements[indexForElement(i + 1, index >> 1)];\n                    levels[i + 1] = parent;\n                } else {\n                    uint256 sibling = self.elements[indexForElement(i, index - 1)];\n                    levels[i + 1] = PoseidonT3.hash([sibling, levels[i]]);\n                }\n            }\n            unchecked {\n                index >>= 1;\n                i++;\n            }\n        }\n        return levels[depth];\n    }\n\n    uint256 public constant Z_0 = 0;\n    uint256 public constant Z_1 = 14744269619966411208579211824598458697587494354926760081771325075741142829156;\n    uint256 public constant Z_2 = 7423237065226347324353380772367382631490014989348495481811164164159255474657;\n    uint256 public constant Z_3 = 11286972368698509976183087595462810875513684078608517520839298933882497716792;\n    uint256 public constant Z_4 = 3607627140608796879659380071776844901612302623152076817094415224584923813162;\n    uint256 public constant Z_5 = 19712377064642672829441595136074946683621277828620209496774504837737984048981;\n    uint256 public constant Z_6 = 20775607673010627194014556968476266066927294572720319469184847051418138353016;\n    uint256 public constant Z_7 = 3396914609616007258851405644437304192397291162432396347162513310381425243293;\n    uint256 public constant Z_8 = 21551820661461729022865262380882070649935529853313286572328683688269863701601;\n    uint256 public constant Z_9 = 6573136701248752079028194407151022595060682063033565181951145966236778420039;\n    uint256 public constant Z_10 = 12413880268183407374852357075976609371175688755676981206018884971008854919922;\n    uint256 public constant Z_11 = 14271763308400718165336499097156975241954733520325982997864342600795471836726;\n    uint256 public constant Z_12 = 20066985985293572387227381049700832219069292839614107140851619262827735677018;\n    uint256 public constant Z_13 = 9394776414966240069580838672673694685292165040808226440647796406499139370960;\n    uint256 public constant Z_14 = 11331146992410411304059858900317123658895005918277453009197229807340014528524;\n    uint256 public constant Z_15 = 15819538789928229930262697811477882737253464456578333862691129291651619515538;\n    uint256 public constant Z_16 = 19217088683336594659449020493828377907203207941212636669271704950158751593251;\n    uint256 public constant Z_17 = 21035245323335827719745544373081896983162834604456827698288649288827293579666;\n    uint256 public constant Z_18 = 6939770416153240137322503476966641397417391950902474480970945462551409848591;\n    uint256 public constant Z_19 = 10941962436777715901943463195175331263348098796018438960955633645115732864202;\n    uint256 public constant Z_20 = 15019797232609675441998260052101280400536945603062888308240081994073687793470;\n    uint256 public constant Z_21 = 11702828337982203149177882813338547876343922920234831094975924378932809409969;\n    uint256 public constant Z_22 = 11217067736778784455593535811108456786943573747466706329920902520905755780395;\n    uint256 public constant Z_23 = 16072238744996205792852194127671441602062027943016727953216607508365787157389;\n    uint256 public constant Z_24 = 17681057402012993898104192736393849603097507831571622013521167331642182653248;\n    uint256 public constant Z_25 = 21694045479371014653083846597424257852691458318143380497809004364947786214945;\n    uint256 public constant Z_26 = 8163447297445169709687354538480474434591144168767135863541048304198280615192;\n    uint256 public constant Z_27 = 14081762237856300239452543304351251708585712948734528663957353575674639038357;\n    uint256 public constant Z_28 = 16619959921569409661790279042024627172199214148318086837362003702249041851090;\n    uint256 public constant Z_29 = 7022159125197495734384997711896547675021391130223237843255817587255104160365;\n    uint256 public constant Z_30 = 4114686047564160449611603615418567457008101555090703535405891656262658644463;\n    uint256 public constant Z_31 = 12549363297364877722388257367377629555213421373705596078299904496781819142130;\n    uint256 public constant Z_32 = 21443572485391568159800782191812935835534334817699172242223315142338162256601;\n\n    function defaultZero(uint8 index) public pure returns (uint256) {\n        if (index == 0) return Z_0;\n        if (index == 1) return Z_1;\n        if (index == 2) return Z_2;\n        if (index == 3) return Z_3;\n        if (index == 4) return Z_4;\n        if (index == 5) return Z_5;\n        if (index == 6) return Z_6;\n        if (index == 7) return Z_7;\n        if (index == 8) return Z_8;\n        if (index == 9) return Z_9;\n        if (index == 10) return Z_10;\n        if (index == 11) return Z_11;\n        if (index == 12) return Z_12;\n        if (index == 13) return Z_13;\n        if (index == 14) return Z_14;\n        if (index == 15) return Z_15;\n        if (index == 16) return Z_16;\n        if (index == 17) return Z_17;\n        if (index == 18) return Z_18;\n        if (index == 19) return Z_19;\n        if (index == 20) return Z_20;\n        if (index == 21) return Z_21;\n        if (index == 22) return Z_22;\n        if (index == 23) return Z_23;\n        if (index == 24) return Z_24;\n        if (index == 25) return Z_25;\n        if (index == 26) return Z_26;\n        if (index == 27) return Z_27;\n        if (index == 28) return Z_28;\n        if (index == 29) return Z_29;\n        if (index == 30) return Z_30;\n        if (index == 31) return Z_31;\n        if (index == 32) return Z_32;\n        revert(\"LazyIMT: defaultZero bad index\");\n    }\n}\n"
    },
    "contracts/WakuRln.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport {IPoseidonHasher} from \"rln-contract/PoseidonHasher.sol\";\nimport {RlnBase, DuplicateIdCommitment, FullTree, InvalidIdCommitment} from \"rln-contract/RlnBase.sol\";\nimport {Ownable} from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\n\nimport {LazyIMT, LazyIMTData} from \"./LazyIMT.sol\";\n\n//import {LazyIMT, LazyIMTData} from \"@zk-kit/imt.sol/LazyIMT.sol\";\n//import \"@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\";\n//import {LazyIMTAnother} from \"@zk-kit/imt.sol/LazyIMT.sol\";\n\n//import {BinaryIMT} from \"./LazyIMT.sol\";\n\nerror NotImplemented();\n\ncontract WakuRln is Ownable, RlnBase {\n    uint16 public immutable contractIndex;\n\n    LazyIMTData tree;\n    using LazyIMT for LazyIMTData;\n\n    constructor(\n        address _poseidonHasher,\n        uint16 _contractIndex\n    ) Ownable() RlnBase(0, 20, _poseidonHasher, address(0)) {\n        contractIndex = _contractIndex;\n\n        //uint8 merkleTreeDepth = 32;\n\n        //tree.init(merkleTreeDepth);\n    }\n\n    // TODO stupid func. Move to constructor\n    function init() external {\n        //uint8 merkleTreeDepth = 32;\n        //tree.init(merkleTreeDepth);\n    }\n\n    /// Registers a member\n    /// @param idCommitment The idCommitment of the member\n    function _register(uint256 idCommitment) internal {\n        _validateRegistration(idCommitment);\n\n        members[idCommitment] = idCommitmentIndex;\n        memberExists[idCommitment] = true;\n        //tree.insert(idCommitment);\n\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\n        idCommitmentIndex += 1;\n    }\n\n    function register(uint256[] calldata idCommitments) external onlyOwner {\n        uint256 len = idCommitments.length;\n        for (uint256 i = 0; i < len; ) {\n            _register(idCommitments[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function register(uint256 idCommitment) external payable override {\n        revert NotImplemented();\n    }\n\n    function slash(\n        uint256 idCommitment,\n        address payable receiver,\n        uint256[8] calldata proof\n    ) external pure override {\n        revert NotImplemented();\n    }\n\n    function _validateRegistration(\n        uint256 idCommitment\n    ) internal view override {\n        if (!isValidCommitment(idCommitment))\n            revert InvalidIdCommitment(idCommitment);\n        if (memberExists[idCommitment] == true) revert DuplicateIdCommitment();\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\n    }\n\n    function _validateSlash(\n        uint256 idCommitment,\n        address payable receiver,\n        uint256[8] calldata proof\n    ) internal pure override {\n        revert NotImplemented();\n    }\n\n    function withdraw() external pure override {\n        revert NotImplemented();\n    }\n/*\n    // Some quick getter functions, unsure if needed\n    function merkleRoot() public view returns(uint256) {\n        return tree.root();\n    }\n\n    function numOfLeaves() public view returns(uint40) {\n        return tree.numberOfLeaves;\n    }\n\n    // Unsure how viable is to fetch elements one by one.\n    // Perhaps we just want the leafs and the client can reconstruct\n    // the hashes.\n    function getElement(uint256 elementIndex) public view returns(uint256) {\n        return tree.elements[elementIndex];\n    }*/\n}\n"
    },
    "contracts/WakuRlnRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport {WakuRln} from \"./WakuRln.sol\";\nimport {IPoseidonHasher} from \"rln-contract/PoseidonHasher.sol\";\nimport {UUPSUpgradeable} from \"openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport {ERC1967Proxy} from \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nerror StorageAlreadyExists(address storageAddress);\nerror NoStorageContractAvailable();\nerror IncompatibleStorage();\nerror IncompatibleStorageIndex();\n\ncontract WakuRlnRegistry is OwnableUpgradeable, UUPSUpgradeable {\n    uint16 public nextStorageIndex;\n    mapping(uint16 => address) public storages;\n\n    uint16 public usingStorageIndex = 0;\n\n    IPoseidonHasher public poseidonHasher;\n\n    event NewStorageContract(uint16 index, address storageAddress);\n\n    modifier onlyUsableStorage() {\n        if (usingStorageIndex >= nextStorageIndex) revert NoStorageContractAvailable();\n        _;\n    }\n\n    function initialize(address _poseidonHasher) external initializer {\n        poseidonHasher = IPoseidonHasher(_poseidonHasher);\n        __Ownable_init();\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function _insertIntoStorageMap(address storageAddress) internal {\n        storages[nextStorageIndex] = storageAddress;\n        emit NewStorageContract(nextStorageIndex, storageAddress);\n        nextStorageIndex += 1;\n    }\n\n    function registerStorage(address storageAddress) external onlyOwner {\n        if (storages[nextStorageIndex] != address(0)) revert StorageAlreadyExists(storageAddress);\n        WakuRln wakuRln = WakuRln(storageAddress);\n        if (wakuRln.poseidonHasher() != poseidonHasher) revert IncompatibleStorage();\n        if (wakuRln.contractIndex() != nextStorageIndex) revert IncompatibleStorageIndex();\n        _insertIntoStorageMap(storageAddress);\n    }\n\n    function newStorage() external onlyOwner {\n        WakuRln newStorageContract = new WakuRln(address(poseidonHasher), nextStorageIndex);\n        _insertIntoStorageMap(address(newStorageContract));\n    }\n\n    function register(uint256[] calldata commitments) external onlyUsableStorage {\n        // iteratively check if the storage contract is full, and increment the usingStorageIndex if it is\n        while (true) {\n            try WakuRln(storages[usingStorageIndex]).register(commitments) {\n                break;\n            } catch (bytes memory err) {\n                if (keccak256(err) != keccak256(abi.encodeWithSignature(\"FullTree()\"))) {\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                    // when there are no further storage contracts available, revert\n                } else if (usingStorageIndex + 1 >= nextStorageIndex) {\n                    revert NoStorageContractAvailable();\n                }\n                usingStorageIndex += 1;\n            }\n        }\n    }\n\n    function register(uint16 storageIndex, uint256[] calldata commitments) external {\n        if (storageIndex >= nextStorageIndex) revert NoStorageContractAvailable();\n        WakuRln(storages[storageIndex]).register(commitments);\n    }\n\n    function register(uint16 storageIndex, uint256 commitment) external {\n        if (storageIndex >= nextStorageIndex) revert NoStorageContractAvailable();\n        // optimize the gas used below\n        uint256[] memory commitments = new uint256[](1);\n        commitments[0] = commitment;\n        WakuRln(storages[storageIndex]).register(commitments);\n    }\n\n    function forceProgress() external onlyOwner onlyUsableStorage {\n        if (storages[usingStorageIndex + 1] == address(0)) revert NoStorageContractAvailable();\n        usingStorageIndex += 1;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "lib/rln-contract/contracts/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0 OR MIT\npragma solidity 0.8.15;\n\ninterface IVerifier {\n    function verifyProof(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "lib/rln-contract/contracts/PoseidonHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Forked from https://github.com/kilic/rlnapp/\n\npragma solidity 0.8.15;\n\ninterface IPoseidonHasher {\n    /// @notice Hashes the input using the Poseidon hash function, n = 2, second input is the constant 0\n    /// @param input The input to hash\n    function hash(uint256 input) external pure returns (uint256 result);\n}\n\ncontract PoseidonHasher is IPoseidonHasher {\n    uint256 public constant Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant C0 = 4417881134626180770308697923359573201005643519861877412381846989312604493735;\n    uint256 constant C1 = 5433650512959517612316327474713065966758808864213826738576266661723522780033;\n    uint256 constant C2 = 13641176377184356099764086973022553863760045607496549923679278773208775739952;\n    uint256 constant C3 = 17949713444224994136330421782109149544629237834775211751417461773584374506783;\n    uint256 constant C4 = 13765628375339178273710281891027109699578766420463125835325926111705201856003;\n    uint256 constant C5 = 19179513468172002314585757290678967643352171735526887944518845346318719730387;\n    uint256 constant C6 = 5157412437176756884543472904098424903141745259452875378101256928559722612176;\n    uint256 constant C7 = 535160875740282236955320458485730000677124519901643397458212725410971557409;\n    uint256 constant C8 = 1050793453380762984940163090920066886770841063557081906093018330633089036729;\n    uint256 constant C9 = 10665495010329663932664894101216428400933984666065399374198502106997623173873;\n    uint256 constant C10 = 19965634623406616956648724894636666805991993496469370618546874926025059150737;\n    uint256 constant C11 = 13007250030070838431593222885902415182312449212965120303174723305710127422213;\n    uint256 constant C12 = 16877538715074991604507979123743768693428157847423939051086744213162455276374;\n    uint256 constant C13 = 18211747749504876135588847560312685184956239426147543810126553367063157141465;\n    uint256 constant C14 = 18151553319826126919739798892854572062191241985315767086020821632812331245635;\n    uint256 constant C15 = 19957033149976712666746140949846950406660099037474791840946955175819555930825;\n    uint256 constant C16 = 3469514863538261843186854830917934449567467100548474599735384052339577040841;\n    uint256 constant C17 = 989698510043911779243192466312362856042600749099921773896924315611668507708;\n    uint256 constant C18 = 12568377015646290945235387813564567111330046038050864455358059568128000172201;\n    uint256 constant C19 = 20856104135605479600325529349246932565148587186338606236677138505306779314172;\n    uint256 constant C20 = 8206918720503535523121349917159924938835810381723474192155637697065780938424;\n    uint256 constant C21 = 1309058477013932989380617265069188723120054926187607548493110334522527703566;\n    uint256 constant C22 = 14076116939332667074621703729512195584105250395163383769419390236426287710606;\n    uint256 constant C23 = 10153498892749751942204288991871286290442690932856658983589258153608012428674;\n    uint256 constant C24 = 18202499207234128286137597834010475797175973146805180988367589376893530181575;\n    uint256 constant C25 = 12739388830157083522877690211447248168864006284243907142044329113461613743052;\n    uint256 constant C26 = 15123358710467780770838026754240340042441262572309759635224051333176022613949;\n    uint256 constant C27 = 19925004701844594370904593774447343836015483888496504201331110250494635362184;\n    uint256 constant C28 = 10352416606816998476681131583320899030072315953910679608943150613208329645891;\n    uint256 constant C29 = 10567371822366244361703342347428230537114808440249611395507235283708966113221;\n    uint256 constant C30 = 5635498582763880627392290206431559361272660937399944184533035305989295959602;\n    uint256 constant C31 = 11866432933224219174041051738704352719163271639958083608224676028593315904909;\n    uint256 constant C32 = 5795020705294401441272215064554385591292330721703923167136157291459784140431;\n    uint256 constant C33 = 9482202378699252817564375087302794636287866584767523335624368774856230692758;\n    uint256 constant C34 = 4245237636894546151746468406560945873445548423466753843402086544922216329298;\n    uint256 constant C35 = 12000500941313982757584712677991730019124834399479314697467598397927435905133;\n    uint256 constant C36 = 7596790274058425558167520209857956363736666939016807569082239187494363541787;\n    uint256 constant C37 = 2484867918246116343205467273440098378820186751202461278013576281097918148877;\n    uint256 constant C38 = 18312645949449997391810445935615409295369169383463185688973803378104013950190;\n    uint256 constant C39 = 15320686572748723004980855263301182130424010735782762814513954166519592552733;\n    uint256 constant C40 = 12618438900597948888520621062416758747872180395546164387827245287017031303859;\n    uint256 constant C41 = 17438141672027706116733201008397064011774368832458707512367404736905021019585;\n    uint256 constant C42 = 6374197807230665998865688675365359100400438034755781666913068586172586548950;\n    uint256 constant C43 = 2189398913433273865510950346186699930188746169476472274335177556702504595264;\n    uint256 constant C44 = 6268495580028970231803791523870131137294646402347399003576649137450213034606;\n    uint256 constant C45 = 17896250365994900261202920044129628104272791547990619503076839618914047059275;\n    uint256 constant C46 = 13692156312448722528008862371944543449350293305158722920787736248435893008873;\n    uint256 constant C47 = 15234446864368744483209945022439268713300180233589581910497691316744177619376;\n    uint256 constant C48 = 1572426502623310766593681563281600503979671244997798691029595521622402217227;\n    uint256 constant C49 = 80103447810215150918585162168214870083573048458555897999822831203653996617;\n    uint256 constant C50 = 8228820324013669567851850635126713973797711779951230446503353812192849106342;\n    uint256 constant C51 = 5375851433746509614045812476958526065449377558695752132494533666370449415873;\n    uint256 constant C52 = 12115998939203497346386774317892338270561208357481805380546938146796257365018;\n    uint256 constant C53 = 9764067909645821279940531410531154041386008396840887338272986634350423466622;\n    uint256 constant C54 = 8538708244538850542384936174629541085495830544298260335345008245230827876882;\n    uint256 constant C55 = 7140127896620013355910287215441004676619168261422440177712039790284719613114;\n    uint256 constant C56 = 14297402962228458726038826185823085337698917275385741292940049024977027409762;\n    uint256 constant C57 = 6667115556431351074165934212337261254608231545257434281887966406956835140819;\n    uint256 constant C58 = 20226761165244293291042617464655196752671169026542832236139342122602741090001;\n    uint256 constant C59 = 12038289506489256655759141386763477208196694421666339040483042079632134429119;\n    uint256 constant C60 = 19027757334170818571203982241812412991528769934917288000224335655934473717551;\n    uint256 constant C61 = 16272152964456553579565580463468069884359929612321610357528838696790370074720;\n    uint256 constant C62 = 2500392889689246014710135696485946334448570271481948765283016105301740284071;\n    uint256 constant C63 = 8595254970528530312401637448610398388203855633951264114100575485022581946023;\n    uint256 constant C64 = 11635945688914011450976408058407206367914559009113158286982919675551688078198;\n    uint256 constant C65 = 614739068603482619581328040478536306925147663946742687395148680260956671871;\n    uint256 constant C66 = 18692271780377861570175282183255720350972693125537599213951106550953176268753;\n    uint256 constant C67 = 4987059230784976306647166378298632695585915319042844495357753339378260807164;\n    uint256 constant C68 = 21851403978498723616722415377430107676258664746210815234490134600998983955497;\n    uint256 constant C69 = 9830635451186415300891533983087800047564037813328875992115573428596207326204;\n    uint256 constant C70 = 4842706106434537116860242620706030229206345167233200482994958847436425185478;\n    uint256 constant C71 = 6422235064906823218421386871122109085799298052314922856340127798647926126490;\n    uint256 constant C72 = 4564364104986856861943331689105797031330091877115997069096365671501473357846;\n    uint256 constant C73 = 1944043894089780613038197112872830569538541856657037469098448708685350671343;\n    uint256 constant C74 = 21179865974855950600518216085229498748425990426231530451599322283119880194955;\n    uint256 constant C75 = 14296697761894107574369608843560006996183955751502547883167824879840894933162;\n    uint256 constant C76 = 12274619649702218570450581712439138337725246879938860735460378251639845671898;\n    uint256 constant C77 = 16371396450276899401411886674029075408418848209575273031725505038938314070356;\n    uint256 constant C78 = 3702561221750983937578095019779188631407216522704543451228773892695044653565;\n    uint256 constant C79 = 19721616877735564664624984774636557499099875603996426215495516594530838681980;\n    uint256 constant C80 = 6383350109027696789969911008057747025018308755462287526819231672217685282429;\n    uint256 constant C81 = 20860583956177367265984596617324237471765572961978977333122281041544719622905;\n    uint256 constant C82 = 5766390934595026947545001478457407504285452477687752470140790011329357286275;\n    uint256 constant C83 = 4043175758319898049344746138515323336207420888499903387536875603879441092484;\n    uint256 constant C84 = 15579382179133608217098622223834161692266188678101563820988612253342538956534;\n    uint256 constant C85 = 1864640783252634743892105383926602930909039567065240010338908865509831749824;\n    uint256 constant C86 = 15943719865023133586707144161652035291705809358178262514871056013754142625673;\n    uint256 constant C87 = 2326415993032390211558498780803238091925402878871059708106213703504162832999;\n    uint256 constant C88 = 19995326402773833553207196590622808505547443523750970375738981396588337910289;\n    uint256 constant C89 = 5143583711361588952673350526320181330406047695593201009385718506918735286622;\n    uint256 constant C90 = 15436006486881920976813738625999473183944244531070780793506388892313517319583;\n    uint256 constant C91 = 16660446760173633166698660166238066533278664023818938868110282615200613695857;\n    uint256 constant C92 = 4966065365695755376133119391352131079892396024584848298231004326013366253934;\n    uint256 constant C93 = 20683781957411705574951987677641476019618457561419278856689645563561076926702;\n    uint256 constant C94 = 17280836839165902792086432296371645107551519324565649849400948918605456875699;\n    uint256 constant C95 = 17045635513701208892073056357048619435743564064921155892004135325530808465371;\n    uint256 constant C96 = 17055032967194400710390142791334572297458033582458169295920670679093585707295;\n    uint256 constant C97 = 15727174639569115300068198908071514334002742825679221638729902577962862163505;\n    uint256 constant C98 = 1001755657610446661315902885492677747789366510875120894840818704741370398633;\n    uint256 constant C99 = 18638547332826171619311285502376343504539399518545103511265465604926625041234;\n    uint256 constant C100 = 6751954224763196429755298529194402870632445298969935050224267844020826420799;\n    uint256 constant C101 = 3526747115904224771452549517614107688674036840088422555827581348280834879405;\n    uint256 constant C102 = 15705897908180497062880001271426561999724005008972544196300715293701537574122;\n    uint256 constant C103 = 574386695213920937259007343820417029802510752426579750428758189312416867750;\n    uint256 constant C104 = 15973040855000600860816974646787367136127946402908768408978806375685439868553;\n    uint256 constant C105 = 20934130413948796333037139460875996342810005558806621330680156931816867321122;\n    uint256 constant C106 = 6918585327145564636398173845411579411526758237572034236476079610890705810764;\n    uint256 constant C107 = 14158163500813182062258176233162498241310167509137716527054939926126453647182;\n    uint256 constant C108 = 4164602626597695668474100217150111342272610479949122406544277384862187287433;\n    uint256 constant C109 = 12146526846507496913615390662823936206892812880963914267275606265272996025304;\n    uint256 constant C110 = 10153527926900017763244212043512822363696541810586522108597162891799345289938;\n    uint256 constant C111 = 13564663485965299104296214940873270349072051793008946663855767889066202733588;\n    uint256 constant C112 = 5612449256997576125867742696783020582952387615430650198777254717398552960096;\n    uint256 constant C113 = 12151885480032032868507892738683067544172874895736290365318623681886999930120;\n    uint256 constant C114 = 380452237704664384810613424095477896605414037288009963200982915188629772177;\n    uint256 constant C115 = 9067557551252570188533509616805287919563636482030947363841198066124642069518;\n    uint256 constant C116 = 21280306817619711661335268484199763923870315733198162896599997188206277056900;\n    uint256 constant C117 = 5567165819557297006750252582140767993422097822227408837378089569369734876257;\n    uint256 constant C118 = 10411936321072105429908396649383171465939606386380071222095155850987201580137;\n    uint256 constant C119 = 21338390051413922944780864872652000187403217966653363270851298678606449622266;\n    uint256 constant C120 = 12156296560457833712186127325312904760045212412680904475497938949653569234473;\n    uint256 constant C121 = 4271647814574748734312113971565139132510281260328947438246615707172526380757;\n    uint256 constant C122 = 9061738206062369647211128232833114177054715885442782773131292534862178874950;\n    uint256 constant C123 = 10134551893627587797380445583959894183158393780166496661696555422178052339133;\n    uint256 constant C124 = 8932270237664043612366044102088319242789325050842783721780970129656616386103;\n    uint256 constant C125 = 3339412934966886386194449782756711637636784424032779155216609410591712750636;\n    uint256 constant C126 = 9704903972004596791086522314847373103670545861209569267884026709445485704400;\n    uint256 constant C127 = 17467570179597572575614276429760169990940929887711661192333523245667228809456;\n    uint256 constant M00 = 2910766817845651019878574839501801340070030115151021261302834310722729507541;\n    uint256 constant M01 = 19727366863391167538122140361473584127147630672623100827934084310230022599144;\n    uint256 constant M10 = 5776684794125549462448597414050232243778680302179439492664047328281728356345;\n    uint256 constant M11 = 8348174920934122550483593999453880006756108121341067172388445916328941978568;\n\n    function hash(uint256 input) external pure override returns (uint256 result) {\n        return _hash(input);\n    }\n\n    function _hash(uint256 input) internal pure returns (uint256 result) {\n        assembly {\n            // Poseidon parameters should be t = 2, RF = 8, RP = 56\n\n            // We load the characteristic\n            let q := Q\n\n            // In zerokit implementation, if we pass inp = [a0,a1,..,an] to Poseidon what is effectively hashed is [0,a0,a1,..,an]\n            // Note that a sequence of MIX-ARK involves 3 Bn254 field additions before the mulmod happens. Worst case we have a value corresponding to 2*(p-1) which is less than 2^256 and hence doesn't overflow\n            //ROUND 0 - FULL\n            let s0 := C0\n            let s1 := add(input, C1)\n            // SBOX\n            let t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 1 - FULL\n            s0 := add(s0, C2)\n            s1 := add(s1, C3)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 2 - FULL\n            s0 := add(s0, C4)\n            s1 := add(s1, C5)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 3 - FULL\n            s0 := add(s0, C6)\n            s1 := add(s1, C7)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 4 - PARTIAL\n            s0 := add(s0, C8)\n            s1 := add(s1, C9)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 5 - PARTIAL\n            s0 := add(s0, C10)\n            s1 := add(s1, C11)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 6 - PARTIAL\n            s0 := add(s0, C12)\n            s1 := add(s1, C13)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 7 - PARTIAL\n            s0 := add(s0, C14)\n            s1 := add(s1, C15)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 8 - PARTIAL\n            s0 := add(s0, C16)\n            s1 := add(s1, C17)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 9 - PARTIAL\n            s0 := add(s0, C18)\n            s1 := add(s1, C19)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 10 - PARTIAL\n            s0 := add(s0, C20)\n            s1 := add(s1, C21)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 11 - PARTIAL\n            s0 := add(s0, C22)\n            s1 := add(s1, C23)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 12 - PARTIAL\n            s0 := add(s0, C24)\n            s1 := add(s1, C25)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 13 - PARTIAL\n            s0 := add(s0, C26)\n            s1 := add(s1, C27)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 14 - PARTIAL\n            s0 := add(s0, C28)\n            s1 := add(s1, C29)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 15 - PARTIAL\n            s0 := add(s0, C30)\n            s1 := add(s1, C31)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 16 - PARTIAL\n            s0 := add(s0, C32)\n            s1 := add(s1, C33)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 17 - PARTIAL\n            s0 := add(s0, C34)\n            s1 := add(s1, C35)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 18 - PARTIAL\n            s0 := add(s0, C36)\n            s1 := add(s1, C37)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 19 - PARTIAL\n            s0 := add(s0, C38)\n            s1 := add(s1, C39)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 20 - PARTIAL\n            s0 := add(s0, C40)\n            s1 := add(s1, C41)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 21 - PARTIAL\n            s0 := add(s0, C42)\n            s1 := add(s1, C43)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 22 - PARTIAL\n            s0 := add(s0, C44)\n            s1 := add(s1, C45)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 23 - PARTIAL\n            s0 := add(s0, C46)\n            s1 := add(s1, C47)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 24 - PARTIAL\n            s0 := add(s0, C48)\n            s1 := add(s1, C49)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 25 - PARTIAL\n            s0 := add(s0, C50)\n            s1 := add(s1, C51)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 26 - PARTIAL\n            s0 := add(s0, C52)\n            s1 := add(s1, C53)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 27 - PARTIAL\n            s0 := add(s0, C54)\n            s1 := add(s1, C55)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 28 - PARTIAL\n            s0 := add(s0, C56)\n            s1 := add(s1, C57)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 29 - PARTIAL\n            s0 := add(s0, C58)\n            s1 := add(s1, C59)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 30 - PARTIAL\n            s0 := add(s0, C60)\n            s1 := add(s1, C61)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 31 - PARTIAL\n            s0 := add(s0, C62)\n            s1 := add(s1, C63)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 32 - PARTIAL\n            s0 := add(s0, C64)\n            s1 := add(s1, C65)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 33 - PARTIAL\n            s0 := add(s0, C66)\n            s1 := add(s1, C67)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 34 - PARTIAL\n            s0 := add(s0, C68)\n            s1 := add(s1, C69)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 35 - PARTIAL\n            s0 := add(s0, C70)\n            s1 := add(s1, C71)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 36 - PARTIAL\n            s0 := add(s0, C72)\n            s1 := add(s1, C73)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 37 - PARTIAL\n            s0 := add(s0, C74)\n            s1 := add(s1, C75)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 38 - PARTIAL\n            s0 := add(s0, C76)\n            s1 := add(s1, C77)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 39 - PARTIAL\n            s0 := add(s0, C78)\n            s1 := add(s1, C79)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 40 - PARTIAL\n            s0 := add(s0, C80)\n            s1 := add(s1, C81)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 41 - PARTIAL\n            s0 := add(s0, C82)\n            s1 := add(s1, C83)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 42 - PARTIAL\n            s0 := add(s0, C84)\n            s1 := add(s1, C85)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 43 - PARTIAL\n            s0 := add(s0, C86)\n            s1 := add(s1, C87)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 44 - PARTIAL\n            s0 := add(s0, C88)\n            s1 := add(s1, C89)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 45 - PARTIAL\n            s0 := add(s0, C90)\n            s1 := add(s1, C91)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 46 - PARTIAL\n            s0 := add(s0, C92)\n            s1 := add(s1, C93)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 47 - PARTIAL\n            s0 := add(s0, C94)\n            s1 := add(s1, C95)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 48 - PARTIAL\n            s0 := add(s0, C96)\n            s1 := add(s1, C97)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 49 - PARTIAL\n            s0 := add(s0, C98)\n            s1 := add(s1, C99)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 50 - PARTIAL\n            s0 := add(s0, C100)\n            s1 := add(s1, C101)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 51 - PARTIAL\n            s0 := add(s0, C102)\n            s1 := add(s1, C103)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 52 - PARTIAL\n            s0 := add(s0, C104)\n            s1 := add(s1, C105)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 53 - PARTIAL\n            s0 := add(s0, C106)\n            s1 := add(s1, C107)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 54 - PARTIAL\n            s0 := add(s0, C108)\n            s1 := add(s1, C109)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 55 - PARTIAL\n            s0 := add(s0, C110)\n            s1 := add(s1, C111)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 56 - PARTIAL\n            s0 := add(s0, C112)\n            s1 := add(s1, C113)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 57 - PARTIAL\n            s0 := add(s0, C114)\n            s1 := add(s1, C115)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 58 - PARTIAL\n            s0 := add(s0, C116)\n            s1 := add(s1, C117)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 59 - PARTIAL\n            s0 := add(s0, C118)\n            s1 := add(s1, C119)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 60 - FULL\n            s0 := add(s0, C120)\n            s1 := add(s1, C121)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 61 - FULL\n            s0 := add(s0, C122)\n            s1 := add(s1, C123)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 62 - FULL\n            s0 := add(s0, C124)\n            s1 := add(s1, C125)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\n            s0 := t\n\n            //ROUND 63 - FULL\n            s0 := add(s0, C126)\n            s1 := add(s1, C127)\n            // SBOX\n            t := mulmod(s0, s0, q)\n            s0 := mulmod(mulmod(t, t, q), s0, q)\n            t := mulmod(s1, s1, q)\n            s1 := mulmod(mulmod(t, t, q), s1, q)\n            // MIX\n            s0 := mod(add(mulmod(s0, M00, q), mulmod(s1, M01, q)), q)\n\n            result := s0\n        }\n    }\n}\n"
    },
    "lib/rln-contract/contracts/RlnBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport {PoseidonHasher} from \"./PoseidonHasher.sol\";\nimport {IVerifier} from \"./IVerifier.sol\";\n\n/// The tree is full\nerror FullTree();\n\n/// Invalid deposit amount\n/// @param required The required deposit amount\n/// @param provided The provided deposit amount\nerror InsufficientDeposit(uint256 required, uint256 provided);\n\n/// Member is already registered\nerror DuplicateIdCommitment();\n\n/// Failed validation on registration/slashing\nerror FailedValidation();\n\n/// Invalid idCommitment\nerror InvalidIdCommitment(uint256 idCommitment);\n\n/// Invalid receiver address, when the receiver is the contract itself or 0x0\nerror InvalidReceiverAddress(address to);\n\n/// Member is not registered\nerror MemberNotRegistered(uint256 idCommitment);\n\n/// Member has no stake\nerror MemberHasNoStake(uint256 idCommitment);\n\n/// User has insufficient balance to withdraw\nerror InsufficientWithdrawalBalance();\n\n/// Contract has insufficient balance to return\nerror InsufficientContractBalance();\n\n/// Invalid proof\nerror InvalidProof();\n\nabstract contract RlnBase {\n    /// @notice The deposit amount required to register as a member\n    uint256 public immutable MEMBERSHIP_DEPOSIT;\n\n    /// @notice The depth of the merkle tree\n    uint256 public immutable DEPTH;\n\n    /// @notice The size of the merkle tree, i.e 2^depth\n    uint256 public immutable SET_SIZE;\n\n    /// @notice The index of the next member to be registered\n    uint256 public idCommitmentIndex = 0;\n\n    /// @notice The amount of eth staked by each member\n    /// maps from idCommitment to the amount staked\n    mapping(uint256 => uint256) public stakedAmounts;\n\n    /// @notice The membership status of each member\n    /// maps from idCommitment to their index in the set\n    mapping(uint256 => uint256) public members;\n\n    mapping(uint256 => bool) public memberExists;\n\n    /// @notice The balance of each user that can be withdrawn\n    mapping(address => uint256) public withdrawalBalance;\n\n    /// @notice The Poseidon hasher contract\n    PoseidonHasher public immutable poseidonHasher;\n\n    /// @notice The groth16 verifier contract\n    IVerifier public immutable verifier;\n\n    /// @notice the deployed block number\n    uint32 public immutable deployedBlockNumber;\n\n    /// Emitted when a new member is added to the set\n    /// @param idCommitment The idCommitment of the member\n    /// @param index The index of the member in the set\n    event MemberRegistered(uint256 idCommitment, uint256 index);\n\n    /// Emitted when a member is removed from the set\n    /// @param idCommitment The idCommitment of the member\n    /// @param index The index of the member in the set\n    event MemberWithdrawn(uint256 idCommitment, uint256 index);\n\n    modifier onlyValidIdCommitment(uint256 idCommitment) {\n        if (!isValidCommitment(idCommitment)) revert InvalidIdCommitment(idCommitment);\n        _;\n    }\n\n    constructor(uint256 membershipDeposit, uint256 depth, address _poseidonHasher, address _verifier) {\n        MEMBERSHIP_DEPOSIT = membershipDeposit;\n        DEPTH = depth;\n        SET_SIZE = 1 << depth;\n        poseidonHasher = PoseidonHasher(_poseidonHasher);\n        verifier = IVerifier(_verifier);\n        deployedBlockNumber = uint32(block.number);\n    }\n\n    /// Allows a user to register as a member\n    /// @param idCommitment The idCommitment of the member\n    function register(uint256 idCommitment) external payable virtual onlyValidIdCommitment(idCommitment) {\n        if (msg.value != MEMBERSHIP_DEPOSIT) {\n            revert InsufficientDeposit(MEMBERSHIP_DEPOSIT, msg.value);\n        }\n        _validateRegistration(idCommitment);\n        _register(idCommitment, msg.value);\n    }\n\n    /// Registers a member\n    /// @param idCommitment The idCommitment of the member\n    /// @param stake The amount of eth staked by the member\n    function _register(uint256 idCommitment, uint256 stake) internal virtual {\n        if (memberExists[idCommitment]) revert DuplicateIdCommitment();\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\n\n        members[idCommitment] = idCommitmentIndex;\n        memberExists[idCommitment] = true;\n        stakedAmounts[idCommitment] = stake;\n\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\n        idCommitmentIndex += 1;\n    }\n\n    /// @dev Inheriting contracts MUST override this function\n    function _validateRegistration(uint256 idCommitment) internal view virtual;\n\n    /// @dev Allows a user to slash a member\n    /// @param idCommitment The idCommitment of the member\n    function slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\n        external\n        virtual\n        onlyValidIdCommitment(idCommitment)\n    {\n        _validateSlash(idCommitment, receiver, proof);\n        _slash(idCommitment, receiver, proof);\n    }\n\n    /// @dev Slashes a member by removing them from the set, and adding their\n    /// stake to the receiver's available withdrawal balance\n    /// @param idCommitment The idCommitment of the member\n    /// @param receiver The address to receive the funds\n    function _slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) internal virtual {\n        if (receiver == address(this) || receiver == address(0)) {\n            revert InvalidReceiverAddress(receiver);\n        }\n\n        if (memberExists[idCommitment] == false) revert MemberNotRegistered(idCommitment);\n        // check if member is registered\n        if (stakedAmounts[idCommitment] == 0) {\n            revert MemberHasNoStake(idCommitment);\n        }\n\n        if (!_verifyProof(idCommitment, receiver, proof)) {\n            revert InvalidProof();\n        }\n\n        uint256 amountToTransfer = stakedAmounts[idCommitment];\n\n        // delete member\n        uint256 index = members[idCommitment];\n        members[idCommitment] = 0;\n        memberExists[idCommitment] = false;\n        stakedAmounts[idCommitment] = 0;\n\n        // refund deposit\n        withdrawalBalance[receiver] += amountToTransfer;\n\n        emit MemberWithdrawn(idCommitment, index);\n    }\n\n    function _validateSlash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\n        internal\n        view\n        virtual;\n\n    /// Allows a user to withdraw funds allocated to them upon slashing a member\n    function withdraw() external virtual {\n        uint256 amount = withdrawalBalance[msg.sender];\n\n        if (amount == 0) revert InsufficientWithdrawalBalance();\n        if (amount > address(this).balance) {\n            revert InsufficientContractBalance();\n        }\n\n        withdrawalBalance[msg.sender] = 0;\n\n        payable(msg.sender).transfer(amount);\n    }\n\n    /// Hashes a value using the Poseidon hasher\n    /// NOTE: The variant of Poseidon we use accepts only 1 input, assume n=2, and the second input is 0\n    /// @param input The value to hash\n    function hash(uint256 input) internal view returns (uint256) {\n        return poseidonHasher.hash(input);\n    }\n\n    function isValidCommitment(uint256 idCommitment) public view returns (bool) {\n        return idCommitment != 0 && idCommitment < poseidonHasher.Q();\n    }\n\n    /// @dev Groth16 proof verification\n    function _verifyProof(uint256 idCommitment, address receiver, uint256[8] calldata proof)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return verifier.verifyProof(\n            [proof[0], proof[1]],\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\n            [proof[6], proof[7]],\n            [idCommitment, uint256(uint160(receiver))]\n        );\n    }\n}\n"
    },
    "poseidon-solidity/PoseidonT3.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nlibrary PoseidonT3 {\n  uint constant M00 = 0x109b7f411ba0e4c9b2b70caf5c36a7b194be7c11ad24378bfedb68592ba8118b;\n  uint constant M01 = 0x2969f27eed31a480b9c36c764379dbca2cc8fdd1415c3dded62940bcde0bd771;\n  uint constant M02 = 0x143021ec686a3f330d5f9e654638065ce6cd79e28c5b3753326244ee65a1b1a7;\n  uint constant M10 = 0x16ed41e13bb9c0c66ae119424fddbcbc9314dc9fdbdeea55d6c64543dc4903e0;\n  uint constant M11 = 0x2e2419f9ec02ec394c9871c832963dc1b89d743c8c7b964029b2311687b1fe23;\n  uint constant M12 = 0x176cc029695ad02582a70eff08a6fd99d057e12e58e7d7b6b16cdfabc8ee2911;\n\n  // See here for a simplified implementation: https://github.com/vimwitch/poseidon-solidity/blob/e57becdabb65d99fdc586fe1e1e09e7108202d53/contracts/Poseidon.sol#L40\n  // Based on: https://github.com/iden3/circomlibjs/blob/v0.0.8/src/poseidon_slow.js\n  function hash(uint[2] memory) public pure returns (uint) {\n    assembly {\n      let F := 21888242871839275222246405745257275088548364400416034343698204186575808495617\n      let M20 := 0x2b90bba00fca0589f617e7dcbfe82e0df706ab640ceb247b791a93b74e36736d\n      let M21 := 0x101071f0032379b697315876690f053d148d4e109f5fb065c8aacc55a0f89bfa\n      let M22 := 0x19a3fc0a56702bf417ba7fee3802593fa644470307043f7773279cd71d25d5e0\n      // load the inputs from memory\n      let state0\n      let scratch0\n      let state1\n      let scratch1\n      let state2\n      let scratch2\n\n      state1 := addmod(mload(0x80), 0x00f1445235f2148c5986587169fc1bcd887b08d4d00868df5696fff40956e864, F)\n      state2 := addmod(mload(0xa0), 0x08dff3487e8ac99e1f29a058d0fa80b930c728730b7ab36ce879f3890ecf73f5, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := addmod(\n        0x2f27be690fdaee46c3ce28f7532b13c856c35342c84bda6e20966310fadc01d0,\n        addmod(addmod(15452833169820924772166449970675545095234312153403844297388521437673434406763, mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2b2ae1acf68b7b8d2416bebf3d4f6234b763fe04b8043ee48b8327bebca16cf2,\n        addmod(addmod(18674271267752038776579386132900109523609358935013267566297499497165104279117, mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x0319d062072bef7ecca5eac06f97d4d55952c175ab6b03eae64b44c7dbf11cfa,\n        addmod(addmod(14817777843080276494683266178512808687156649753153012854386334860566696099579, mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := addmod(\n        0x28813dcaebaeaa828a376df87af4a63bc8b7bf27ad49c6298ef7b387bf28526d,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x2727673b2ccbc903f181bf38e1c1d40d2033865200c352bc150928adddf9cb78,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x234ec45ca27727c2e74abd2b2a1494cd6efbd43e340587d6b8fb9e31e65cc632,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := addmod(\n        0x15b52534031ae18f7f862cb2cf7cf760ab10a8150a337b1ccd99ff6e8797d428,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x0dc8fad6d9e4b35f5ed9a3d186b79ce38e0e8a8d1b58b132d701d4eecf68d1f6,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x1bcd95ffc211fbca600f705fad3fb567ea4eb378f62e1fec97805518a47e4d9c,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := addmod(\n        0x10520b0ab721cadfe9eff81b016fc34dc76da36c2578937817cb978d069de559,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1f6d48149b8e7f7d9b257d8ed5fbbaf42932498075fed0ace88a9eb81f5627f6,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1d9655f652309014d29e00ef35a2089bfff8dc1c816f0dc9ca34bdb5460c8705,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x04df5a56ff95bcafb051f7b1cd43a99ba731ff67e47032058fe3d4185697cc7d,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x0672d995f8fff640151b3d290cedaf148690a10a8c8424a7f6ec282b6e4be828,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x099952b414884454b21200d7ffafdd5f0c9a9dcc06f2708e9fc1d8209b5c75b9,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x052cba2255dfd00c7c483143ba8d469448e43586a9b4cd9183fd0e843a6b9fa6,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0b8badee690adb8eb0bd74712b7999af82de55707251ad7716077cb93c464ddc,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x119b1590f13307af5a1ee651020c07c749c15d60683a8050b963d0a8e4b2bdd1,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x03150b7cd6d5d17b2529d36be0f67b832c4acfc884ef4ee5ce15be0bfb4a8d09,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2cc6182c5e14546e3cf1951f173912355374efb83d80898abe69cb317c9ea565,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x005032551e6378c450cfe129a404b3764218cadedac14e2b92d2cd73111bf0f9,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x233237e3289baa34bb147e972ebcb9516469c399fcc069fb88f9da2cc28276b5,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x05c8f4f4ebd4a6e3c980d31674bfbe6323037f21b34ae5a4e80c2d4c24d60280,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x0a7b1db13042d396ba05d818a319f25252bcf35ef3aeed91ee1f09b2590fc65b,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2a73b71f9b210cf5b14296572c9d32dbf156e2b086ff47dc5df542365a404ec0,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1ac9b0417abcc9a1935107e9ffc91dc3ec18f2c4dbe7f22976a760bb5c50c460,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x12c0339ae08374823fabb076707ef479269f3e4d6cb104349015ee046dc93fc0,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x0b7475b102a165ad7f5b18db4e1e704f52900aa3253baac68246682e56e9a28e,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x037c2849e191ca3edb1c5e49f6e8b8917c843e379366f2ea32ab3aa88d7f8448,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x05a6811f8556f014e92674661e217e9bd5206c5c93a07dc145fdb176a716346f,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x29a795e7d98028946e947b75d54e9f044076e87a7b2883b47b675ef5f38bd66e,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x20439a0c84b322eb45a3857afc18f5826e8c7382c8a1585c507be199981fd22f,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2e0ba8d94d9ecf4a94ec2050c7371ff1bb50f27799a84b6d4a2a6f2a0982c887,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x143fd115ce08fb27ca38eb7cce822b4517822cd2109048d2e6d0ddcca17d71c8,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0c64cbecb1c734b857968dbbdcf813cdf8611659323dbcbfc84323623be9caf1,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x028a305847c683f646fca925c163ff5ae74f348d62c2b670f1426cef9403da53,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2e4ef510ff0b6fda5fa940ab4c4380f26a6bcb64d89427b824d6755b5db9e30c,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x0081c95bc43384e663d79270c956ce3b8925b4f6d033b078b96384f50579400e,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2ed5f0c91cbd9749187e2fade687e05ee2491b349c039a0bba8a9f4023a0bb38,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x30509991f88da3504bbf374ed5aae2f03448a22c76234c8c990f01f33a735206,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1c3f20fd55409a53221b7c4d49a356b9f0a1119fb2067b41a7529094424ec6ad,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x10b4e7f3ab5df003049514459b6e18eec46bb2213e8e131e170887b47ddcb96c,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2a1982979c3ff7f43ddd543d891c2abddd80f804c077d775039aa3502e43adef,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1c74ee64f15e1db6feddbead56d6d55dba431ebc396c9af95cad0f1315bd5c91,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x07533ec850ba7f98eab9303cace01b4b9e4f2e8b82708cfa9c2fe45a0ae146a0,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x21576b438e500449a151e4eeaf17b154285c68f42d42c1808a11abf3764c0750,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x2f17c0559b8fe79608ad5ca193d62f10bce8384c815f0906743d6930836d4a9e,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x2d477e3862d07708a79e8aae946170bc9775a4201318474ae665b0b1b7e2730e,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x162f5243967064c390e095577984f291afba2266c38f5abcd89be0f5b2747eab,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2b4cb233ede9ba48264ecd2c8ae50d1ad7a8596a87f29f8a7777a70092393311,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2c8fbcb2dd8573dc1dbaf8f4622854776db2eece6d85c4cf4254e7c35e03b07a,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x1d6f347725e4816af2ff453f0cd56b199e1b61e9f601e9ade5e88db870949da9,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x204b0c397f4ebe71ebc2d8b3df5b913df9e6ac02b68d31324cd49af5c4565529,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x0c4cb9dc3c4fd8174f1149b3c63c3c2f9ecb827cd7dc25534ff8fb75bc79c502,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x174ad61a1448c899a25416474f4930301e5c49475279e0639a616ddc45bc7b54,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1a96177bcf4d8d89f759df4ec2f3cde2eaaa28c177cc0fa13a9816d49a38d2ef,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x066d04b24331d71cd0ef8054bc60c4ff05202c126a233c1a8242ace360b8a30a,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x2a4c4fc6ec0b0cf52195782871c6dd3b381cc65f72e02ad527037a62aa1bd804,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x13ab2d136ccf37d447e9f2e14a7cedc95e727f8446f6d9d7e55afc01219fd649,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1121552fca26061619d24d843dc82769c1b04fcec26f55194c2e3e869acc6a9a,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x00ef653322b13d6c889bc81715c37d77a6cd267d595c4a8909a5546c7c97cff1,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x0e25483e45a665208b261d8ba74051e6400c776d652595d9845aca35d8a397d3,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x29f536dcb9dd7682245264659e15d88e395ac3d4dde92d8c46448db979eeba89,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x2a56ef9f2c53febadfda33575dbdbd885a124e2780bbea170e456baace0fa5be,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1c8361c78eb5cf5decfb7a2d17b5c409f2ae2999a46762e8ee416240a8cb9af1,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x151aff5f38b20a0fc0473089aaf0206b83e8e68a764507bfd3d0ab4be74319c5,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x04c6187e41ed881dc1b239c88f7f9d43a9f52fc8c8b6cdd1e76e47615b51f100,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x13b37bd80f4d27fb10d84331f6fb6d534b81c61ed15776449e801b7ddc9c2967,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x01a5c536273c2d9df578bfbd32c17b7a2ce3664c2a52032c9321ceb1c4e8a8e4,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x2ab3561834ca73835ad05f5d7acb950b4a9a2c666b9726da832239065b7c3b02,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1d4d8ec291e720db200fe6d686c0d613acaf6af4e95d3bf69f7ed516a597b646,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x041294d2cc484d228f5784fe7919fd2bb925351240a04b711514c9c80b65af1d,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x154ac98e01708c611c4fa715991f004898f57939d126e392042971dd90e81fc6,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x0b339d8acca7d4f83eedd84093aef51050b3684c88f8b0b04524563bc6ea4da4,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x0955e49e6610c94254a4f84cfbab344598f0e71eaff4a7dd81ed95b50839c82e,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x06746a6156eba54426b9e22206f15abca9a6f41e6f535c6f3525401ea0654626,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0f18f5a0ecd1423c496f3820c549c27838e5790e2bd0a196ac917c7ff32077fb,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x04f6eeca1751f7308ac59eff5beb261e4bb563583ede7bc92a738223d6f76e13,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2b56973364c4c4f5c1a3ec4da3cdce038811eb116fb3e45bc1768d26fc0b3758,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x123769dd49d5b054dcd76b89804b1bcb8e1392b385716a5d83feb65d437f29ef,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2147b424fc48c80a88ee52b91169aacea989f6446471150994257b2fb01c63e9,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x0fdc1f58548b85701a6c5505ea332a29647e6f34ad4243c2ea54ad897cebe54d,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x12373a8251fea004df68abcf0f7786d4bceff28c5dbbe0c3944f685cc0a0b1f2,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x21e4f4ea5f35f85bad7ea52ff742c9e8a642756b6af44203dd8a1f35c1a90035,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x16243916d69d2ca3dfb4722224d4c462b57366492f45e90d8a81934f1bc3b147,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1efbe46dd7a578b4f66f9adbc88b4378abc21566e1a0453ca13a4159cac04ac2,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x07ea5e8537cf5dd08886020e23a7f387d468d5525be66f853b672cc96a88969a,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x05a8c4f9968b8aa3b7b478a30f9a5b63650f19a75e7ce11ca9fe16c0b76c00bc,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x20f057712cc21654fbfe59bd345e8dac3f7818c701b9c7882d9d57b72a32e83f,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x04a12ededa9dfd689672f8c67fee31636dcd8e88d01d49019bd90b33eb33db69,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x27e88d8c15f37dcee44f1e5425a51decbd136ce5091a6767e49ec9544ccd101a,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2feed17b84285ed9b8a5c8c5e95a41f66e096619a7703223176c41ee433de4d1,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x1ed7cc76edf45c7c404241420f729cf394e5942911312a0d6972b8bd53aff2b8,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x15742e99b9bfa323157ff8c586f5660eac6783476144cdcadf2874be45466b1a,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1aac285387f65e82c895fc6887ddf40577107454c6ec0317284f033f27d0c785,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x25851c3c845d4790f9ddadbdb6057357832e2e7a49775f71ec75a96554d67c77,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x15a5821565cc2ec2ce78457db197edf353b7ebba2c5523370ddccc3d9f146a67,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2411d57a4813b9980efa7e31a1db5966dcf64f36044277502f15485f28c71727,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x002e6f8d6520cd4713e335b8c0b6d2e647e9a98e12f4cd2558828b5ef6cb4c9b,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x2ff7bc8f4380cde997da00b616b0fcd1af8f0e91e2fe1ed7398834609e0315d2,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x00b9831b948525595ee02724471bcd182e9521f6b7bb68f1e93be4febb0d3cbe,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x0a2f53768b8ebf6a86913b0e57c04e011ca408648a4743a87d77adbf0c9c3512,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x00248156142fd0373a479f91ff239e960f599ff7e94be69b7f2a290305e1198d,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x171d5620b87bfb1328cf8c02ab3f0c9a397196aa6a542c2350eb512a2b2bcda9,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x170a4f55536f7dc970087c7c10d6fad760c952172dd54dd99d1045e4ec34a808,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x29aba33f799fe66c2ef3134aea04336ecc37e38c1cd211ba482eca17e2dbfae1,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1e9bc179a4fdd758fdd1bb1945088d47e70d114a03f6a0e8b5ba650369e64973,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1dd269799b660fad58f7f4892dfb0b5afeaad869a9c4b44f9c9e1c43bdaf8f09,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x22cdbc8b70117ad1401181d02e15459e7ccd426fe869c7c95d1dd2cb0f24af38,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x0ef042e454771c533a9f57a55c503fcefd3150f52ed94a7cd5ba93b9c7dacefd,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x11609e06ad6c8fe2f287f3036037e8851318e8b08a0359a03b304ffca62e8284,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x1166d9e554616dba9e753eea427c17b7fecd58c076dfe42708b08f5b783aa9af,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x2de52989431a859593413026354413db177fbf4cd2ac0b56f855a888357ee466,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x3006eb4ffc7a85819a6da492f3a8ac1df51aee5b17b8e89d74bf01cf5f71e9ad,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2af41fbb61ba8a80fdcf6fff9e3f6f422993fe8f0a4639f962344c8225145086,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x119e684de476155fe5a6b41a8ebc85db8718ab27889e85e781b214bace4827c3,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x1835b786e2e8925e188bea59ae363537b51248c23828f047cff784b97b3fd800,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x28201a34c594dfa34d794996c6433a20d152bac2a7905c926c40e285ab32eeb6,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x083efd7a27d1751094e80fefaf78b000864c82eb571187724a761f88c22cc4e7,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x0b6f88a3577199526158e61ceea27be811c16df7774dd8519e079564f61fd13b,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x0ec868e6d15e51d9644f66e1d6471a94589511ca00d29e1014390e6ee4254f5b,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2af33e3f866771271ac0c9b3ed2e1142ecd3e74b939cd40d00d937ab84c98591,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x0b520211f904b5e7d09b5d961c6ace7734568c547dd6858b364ce5e47951f178,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x0b2d722d0919a1aad8db58f10062a92ea0c56ac4270e822cca228620188a1d40,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x1f790d4d7f8cf094d980ceb37c2453e957b54a9991ca38bbe0061d1ed6e562d4,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x0171eb95dfbf7d1eaea97cd385f780150885c16235a2a6a8da92ceb01e504233,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x0c2d0e3b5fd57549329bf6885da66b9b790b40defd2c8650762305381b168873,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1162fb28689c27154e5a8228b4e72b377cbcafa589e283c35d3803054407a18d,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2f1459b65dee441b64ad386a91e8310f282c5a92a89e19921623ef8249711bc0,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x1e6ff3216b688c3d996d74367d5cd4c1bc489d46754eb712c243f70d1b53cfbb,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x01ca8be73832b8d0681487d27d157802d741a6f36cdc2a0576881f9326478875,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1f7735706ffe9fc586f976d5bdf223dc680286080b10cea00b9b5de315f9650e,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2522b60f4ea3307640a0c2dce041fba921ac10a3d5f096ef4745ca838285f019,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x23f0bee001b1029d5255075ddc957f833418cad4f52b6c3f8ce16c235572575b,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2bc1ae8b8ddbb81fcaac2d44555ed5685d142633e9df905f66d9401093082d59,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x0f9406b8296564a37304507b8dba3ed162371273a07b1fc98011fcd6ad72205f,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x2360a8eb0cc7defa67b72998de90714e17e75b174a52ee4acb126c8cd995f0a8,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x15871a5cddead976804c803cbaef255eb4815a5e96df8b006dcbbc2767f88948,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x193a56766998ee9e0a8652dd2f3b1da0362f4f54f72379544f957ccdeefb420f,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x2a394a43934f86982f9be56ff4fab1703b2e63c8ad334834e4309805e777ae0f,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x1859954cfeb8695f3e8b635dcb345192892cd11223443ba7b4166e8876c0d142,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x04e1181763050e58013444dbcb99f1902b11bc25d90bbdca408d3819f4fed32b,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0fdb253dee83869d40c335ea64de8c5bb10eb82db08b5e8b1f5e5552bfd05f23,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x058cbe8a9a5027bdaa4efb623adead6275f08686f1c08984a9d7c5bae9b4f1c0,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x1382edce9971e186497eadb1aeb1f52b23b4b83bef023ab0d15228b4cceca59a,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x03464990f045c6ee0819ca51fd11b0be7f61b8eb99f14b77e1e6634601d9e8b5,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x23f7bfc8720dc296fff33b41f98ff83c6fcab4605db2eb5aaa5bc137aeb70a58,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x0a59a158e3eec2117e6e94e7f0e9decf18c3ffd5e1531a9219636158bbaf62f2,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x06ec54c80381c052b58bf23b312ffd3ce2c4eba065420af8f4c23ed0075fd07b,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x118872dc832e0eb5476b56648e867ec8b09340f7a7bcb1b4962f0ff9ed1f9d01,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x13d69fa127d834165ad5c7cba7ad59ed52e0b0f0e42d7fea95e1906b520921b1,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x169a177f63ea681270b1c6877a73d21bde143942fb71dc55fd8a49f19f10c77b,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x04ef51591c6ead97ef42f287adce40d93abeb032b922f66ffb7e9a5a7450544d,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x256e175a1dc079390ecd7ca703fb2e3b19ec61805d4f03ced5f45ee6dd0f69ec,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x30102d28636abd5fe5f2af412ff6004f75cc360d3205dd2da002813d3e2ceeb2,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x10998e42dfcd3bbf1c0714bc73eb1bf40443a3fa99bef4a31fd31be182fcc792,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x193edd8e9fcf3d7625fa7d24b598a1d89f3362eaf4d582efecad76f879e36860,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x18168afd34f2d915d0368ce80b7b3347d1c7a561ce611425f2664d7aa51f0b5d,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x29383c01ebd3b6ab0c017656ebe658b6a328ec77bc33626e29e2e95b33ea6111,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x10646d2f2603de39a1f4ae5e7771a64a702db6e86fb76ab600bf573f9010c711,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0beb5e07d1b27145f575f1395a55bf132f90c25b40da7b3864d0242dcb1117fb,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x16d685252078c133dc0d3ecad62b5c8830f95bb2e54b59abdffbf018d96fa336,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x0a6abd1d833938f33c74154e0404b4b40a555bbbec21ddfafd672dd62047f01a,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1a679f5d36eb7b5c8ea12a4c2dedc8feb12dffeec450317270a6f19b34cf1860,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x0980fb233bd456c23974d50e0ebfde4726a423eada4e8f6ffbc7592e3f1b93d6,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x161b42232e61b84cbf1810af93a38fc0cece3d5628c9282003ebacb5c312c72b,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0ada10a90c7f0520950f7d47a60d5e6a493f09787f1564e5d09203db47de1a0b,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1a730d372310ba82320345a29ac4238ed3f07a8a2b4e121bb50ddb9af407f451,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x2c8120f268ef054f817064c369dda7ea908377feaba5c4dffbda10ef58e8c556,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1c7c8824f758753fa57c00789c684217b930e95313bcb73e6e7b8649a4968f70,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x2cd9ed31f5f8691c8e39e4077a74faa0f400ad8b491eb3f7b47b27fa3fd1cf77,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x23ff4f9d46813457cf60d92f57618399a5e022ac321ca550854ae23918a22eea,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x09945a5d147a4f66ceece6405dddd9d0af5a2c5103529407dff1ea58f180426d,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x188d9c528025d4c2b67660c6b771b90f7c7da6eaa29d3f268a6dd223ec6fc630,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x3050e37996596b7f81f68311431d8734dba7d926d3633595e0c0d8ddf4f0f47f,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x15af1169396830a91600ca8102c35c426ceae5461e3f95d89d829518d30afd78,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x1da6d09885432ea9a06d9f37f873d985dae933e351466b2904284da3320d8acc,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := addmod(\n        0x2796ea90d269af29f5f8acf33921124e4e4fad3dbe658945e546ee411ddaa9cb,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x202d7dd1da0f6b4b0325c8b3307742f01e15612ec8e9304a7cb0319e01d32d60,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x096d6790d05bb759156a952ba263d672a2d7f9c788f4c831a29dace4c0f8be5f,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := addmod(\n        0x054efa1f65b0fce283808965275d877b438da23ce5b13e1963798cb1447d25a4,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x1b162f83d917e93edb3308c29802deb9d8aa690113b2e14864ccf6e18e4165f1,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x21e5241e12564dd6fd9f1cdd2a0de39eedfefc1466cc568ec5ceb745a0506edc,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := addmod(\n        0x1cfb5662e8cf5ac9226a80ee17b36abecb73ab5f87e161927b4349e10e4bdf08,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x0f21177e302a771bbae6d8d1ecb373b62c99af346220ac0129c53f666eb24100,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1671522374606992affb0dd7f71b12bec4236aede6290546bcef7e1f515c2320,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := addmod(\n        0x0fa3ec5b9488259c2eb4cf24501bfad9be2ec9e42c5cc8ccd419d2a692cad870,\n        addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F),\n        F\n      )\n      scratch1 := addmod(\n        0x193c0e04e0bd298357cb266c1506080ed36edce85c648cc085e8c57b1ab54bba,\n        addmod(addmod(mulmod(state0, M01, F), mulmod(state1, M11, F), F), mulmod(state2, M21, F), F),\n        F\n      )\n      scratch2 := addmod(\n        0x102adf8ef74735a27e9128306dcbc3c99f6f7291cd406578ce14ea2adaba68f8,\n        addmod(addmod(mulmod(state0, M02, F), mulmod(state1, M12, F), F), mulmod(state2, M22, F), F),\n        F\n      )\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := addmod(\n        0x0fe0af7858e49859e2a54d6f1ad945b1316aa24bfbdd23ae40a6d0cb70c3eab1,\n        addmod(addmod(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F), F), mulmod(scratch2, M20, F), F),\n        F\n      )\n      state1 := addmod(\n        0x216f6717bbc7dedb08536a2220843f4e2da5f1daa9ebdefde8a5ea7344798d22,\n        addmod(addmod(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F), F), mulmod(scratch2, M21, F), F),\n        F\n      )\n      state2 := addmod(\n        0x1da55cc900f0d21f4a3e694391918a1b3c23b2ac773c6b3ef88e2e4228325161,\n        addmod(addmod(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F), F), mulmod(scratch2, M22, F), F),\n        F\n      )\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n\n      mstore(0x0, addmod(addmod(mulmod(state0, M00, F), mulmod(state1, M10, F), F), mulmod(state2, M20, F), F))\n\n      return(0, 0x20)\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "rln-contract/=lib/rln-contract/contracts/",
      "zk-kit/=lib/zk-kit/"
    ]
  }
}
